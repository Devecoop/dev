<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#physical-overview">Overview</a></td></tr>
    <tr><td>&raquo; <a href="#hardware-solutions">Hardware solutions</a></td></tr>
    <tr><td>&raquo; <a href="#receiving-property-updates">Receiving property updates</a></td></tr>
    <tr><td>&raquo; <a href="#sending-updates-to-lelylan">Sending updates to Lelylan</a></td></tr>
    <tr><td>&raquo; <a href="#physical-devices-communication">Physical devices communication</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="physical-devices"><%= title %></a></h1>

<p>
Physical devices are the real objects you physically interact with everyday of your life
like lights, appliances, alarms and more. To enable the communication between Lelylan
and physical devices they should provide a simple set of web services.
<p>

<p>
Keep in mind that physical devices are characterized uniquely by their properties. This keeps
physical devices simple to build, still giving the possibility to extend their functionalities
adding new services (e.g. rules engines, sceneries, etc.) on top of Lelylan whenever you want.
<p>

</article>

</br>

<article>

<h1 class="call"><a name="physical-overview">Overview</a></h1>

<%= render 'shared/animations/physical_device' %>

</article>

</br>

<article>

<h1 class="call"><a name="hardware-solutions">Hardware solutions</a></h1>

<p>
To build a physical device you can use different hardware solutions varying
on <strong>computational power</strong>, <strong>wireless capability</strong>
and <strong>budget</strong>.
</p>

<table>
  <thead>
    <tr>
      <td><strong>MODEL</strong></td>
      <td><strong>DESCRIPTION</strong></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://www.arduino.cc/">Arduino</a></td>
      <td>
        Open-source electronics prototyping platform.
      </td>
    </tr>
    <tr>
      <td><a href="http://electricimp.com/">Electric imp</a></td>
      <td>
        A complete and cheap solution to connect devices to the internet, wirelessly.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.raspberrypi.org/">Raspberry Pi</a></td>
      <td>
        Credit-card sized computer as ARM GNU/Linux box for $25.
      </td>
    </tr>
    <tr>
      <td><a href="http://nanode.eu/">Nanode</a></td>
      <td>
        Open-source Arduino-like board that has in-built web connectivity.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.openpicus.com/">openPICUS</a></td>
      <td>
        Platform to control and communication for your electronic devices through the web.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.libelium.com/">Libelium</a></td>
      <td>
        Hardware technology for the implementation of wireless sensor networks.
      </td>
    </tr>
    <tr>
      <td><a href="http://netduino.com/">Netduino</a></td>
      <td>
        Open-source electronics platform using the .NET Micro Framework.
      </td>
    </tr>
    <tr>
      <td><a href="http://developer.android.com/tools/adk/index.html">Android ADK</a></td>
      <td>
        Designed to let hardware builders and software developers create accessories for Android.
      </td>
    </tr>
    <tr>
      <td><a href="http://rascalmicro.com/">The Rascal</a></td>
      <td>
        Small computer to monitor and control the world remotely.
      </td>
    </tr>
    <tr>
      <td><a href="http://pandaboard.org/">Beagle Board</a></td>
      <td>
        Open OMAP 4 mobile software development platform.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.plugcomputer.org/">Plug Computer</a></td>
      <td>
        Small form factor server.
      </td>
    </tr>
    <tfoot>
      <tr>
        <td colspan="2">
          Read
          <a href="http://www.lelylan.com/blog/electronics/">Hacking the Internet of Things</a> and
          <a href="http://www.lelylan.com/blog/boards/">Get into the House</a> to learn more about.
        </td>
      </tr>
    </tfoot>
  </tbody>
</table>

</article>

</br></br>

<article>

<h1 class="call"><a name="receiving-property-updates">Receiving property updates</a></h1>

<p>
The physical devices API let you to connect any physical device to Lelylan by describing
how it can receive updates when a device changes its
<a href="/api/devices#update-properties">properties</a> or
<a href="/api/devices#update-properties">executes a function</a>.
</p>

<h4>Example Resource URL</h4>

<div class="preview">
<pre><code class="no-highlight">PUT http://arduino.house.com/physical-id</code></pre>
</div>

<h4>Sent Headers</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>X-Physical-Signature</span>
        <span class="info">required</span>
      </td>
      <td>
        The message signature. To verify that the payload you received comes from lelylan you
        must verify the "X-Physical-Signature" header. This is a SHA-1 signed hexadecimal digest
        using the <a href="/api/devices#get-a-device-private-info">device secret</a> as key and
        the payload as message. <a href="/community/faq#signature">Learn more about</a>.
      </td>
    </tr>
  </tbody>
</table>

<h4>Sent Params</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>nonce</span>
        <span class="info">required</span>
      </td>
      <td>
        Random unique identifier to avoid replay attacks.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to change.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.uri</span>
        <span class="info">required</span>
      </td>
      <td>
        Property URI.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Desired property value.
      </td>
    </tr>
  </tbody>
</table>

<h4>Example Request</h4>

<p>
When the user changes the <a href="/api/devices#update-properties">device properties</a> or
<a href="/api/devices#update-properties">executes a function</a> a request to the connected
physical device is forwarded.
</p>

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-physical-device-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-physical-device-properties-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-physical-device-properties-javascript" data-toggle="tab" class="javascript">Javascript</a></li>
  <li><a href="#update-physical-device-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-physical-device-properties-curl">
    <div class="preview">
      <pre><code class="no-highlight">curl -X PUT http://arduino.house.com/&lt;physical-id&gt; \
    -H 'Content-Type: application/json' \
    -H 'X-Physical-Signature: 6e3f998e7f7bf27b8fa6ff426b0a980465aa8468' \
    -d '{
          "nonce": "beb11631-070a-484f-9980-5a6fa8469bb5",
          "properties": [{
            "uri": "http://api.lelylan.com/properties/&lt;status&gt;",
            "id": "status-id",
            "value": "on" }]
        }'</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-node">
    <div class="preview">
      <pre><code class="javascript">var Lelylan = require('lelylan-node')();
var uri = 'http://arduino.house.com/id'; // physical device URI
var secret = 'device-secret'; // get it using /devices/:id/privates
var params = {
  'properties':
    [ { 'uri': 'http://api.lelylan.com/properties/&lt;status&gt;',
        'id': 'status',
        'value': 'on' } ] };

Lelylan.Physical.properties(uri, secret, params, callback);</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-javascript">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-ruby">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
</div>

<h4>Example header response</h4>

<div class="preview"><pre><code class="no-highlight">HTTP/1.1 202 Accepted</code></pre></div>

<p>
Lelylan ignores the response body. When the physical device accepts a requests sends back
a <a href="https://tools.ietf.org/html/rfc2616#section-10.2.3">202 response</a>. Only once
the updates are applied <a href="sending-updates-to-lelylan">Lelylan is notified</a>.
</p>

</article>

</br>

<article>

<h1 class="call"><a name="sending-updates-to-lelylan">Sending updates to Lelylan</a></h1>

<p>
A physical device has access to a restricted set of Lelylan services.
</p>

<ul>
  <li>
  <strong><a href="/api/devices#update-properties">Update device properties</a></strong>
  </li>
  <li>
  <strong><a href="/api/devices#execute-a-function">Execute a device function</a></strong>
  </li>
  <li>
  <strong><a href="/api/devices#update-a-device">Update a device</a></strong>
  </li>
  <%#<li>%>
  <%#<strong><a href="/api/devices/consumptions#create-a-consumption">Create a consumption</a></strong>%>
  <%#</li>%>
</ul>

<p>
Due to the fact that a secure channel is not guaranteed for a physical device, OAuth2 tokens
can't be used. To make the communication safe every request needs to have two extra params.
</p>

<ul>
  <li>
  <strong>X-Physical-Signature</strong>. Every request must contain the X-Physical-Signature
  header which is the message signature used from Lelylan to verify that the payload comes from
  the physical device. This must be a SHA-1-signed hexadecimal digest using the
  <a href="/api/devices#get-a-device-private-info">device secret</a> as key and
  the payload as message. <a href="/community/faq#signature">Learn more about</a>.
  </li>
  <li>
  <strong>nonce</strong>. Every request must contain a nonce. A nonce is a unique string between
  all requests coming from the physical device and Lelylan. It is used to avoid replay attacks.
  </li>
</ul>

<h4>Example Request</h4>

<p>
Most of the time the physical device needs to update the device properties. Here an example.
</p>

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-device-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-device-properties-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-device-properties-javascript" data-toggle="tab" class="javascript">Javascript</a></li>
  <li><a href="#update-device-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-device-properties-curl">
    <div class="preview">
      <pre><code class="no-highlight">curl -X PUT http://api.lelylan.com/devices/&lt;id&gt;/properties \
    -H 'X-Physical-Signature: &lt;signature&gt;' \
    -H 'Content-Type: application/json' \
    -d '{
          "nonce": "beb11631-070a-484f-9980-5a6fa8469bb5",
          "properties": [{
            "uri": "http://api.lelylan.com/properties/&lt;status&gt;",
            "value": "on",
            "pending": false
          }]
        }'</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-node">
    <div class="preview">
      <pre><code class="javascript">var Lelylan = require('lelylan-node')();
var uri = 'http://api.lelylan.com/devices/&lt;id&gt;/properties'; // device property service
var secret = 'device-secret'; // get it using /devices/:id/privates
var params = {
  'properties':
    [ { 'uri': 'http://api.lelylan.com/properties/&lt;status&gt;',
        'value': 'on',
        'pending': false } ] };

Lelylan.Physical.properties(uri, secret, params, callback);</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-javascript">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-ruby">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
</div>

<p class="notice">
<span class="label">Notice</span>
The device <code>secret</code> and the device <code>uri</code> must be stored in the physical device.
</p>

</article>

<br/><br/>

<article>

<h1 class="call"><a name="physical-devices-communication">Physical devices communication flows</a></h1>

<p>
Physical devices must be accessible from the Internet in order to be used by Lelylan.
The common solution is to associate a URI to the physical device and directly
communicate with it. Anyway other solutions based on communication protocols like
<a href="http://mqtt.org/">MQTT</a> and <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
can simplify a lot the developer life.
</p>

<ul>
  <li>
  <strong><a name="physical-direct">Direct URI</a></strong> -
  The physical device is directly accessible through a URI. Use a static
  IP Address or create a Tunnel using solutions like
  <a href="http://progrium.com/localtunnel/">Local Tunnel</a>,
  <a href="https://forwardhq.com/">Forward</a> or
  <a href="http://tunnlr.com/">Tunnlr</a>).
  </li>

  <li>
  <strong><a name="physical-websocket">WebSocket</a></strong> -
  <span class="label warning">todo</span>
  The physical device is connected to a <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
  server as a client. The WebSocket server keeps the connection open and pushes all requests.
  </li>

  <li>
  <strong><a name="physical-mqtt">MQTT</a></strong> -
  <span class="label warning">todo</span>
  The physical device is connected to a <a href="http://mqtt.org/">MQTT</a> server as a client.
  The MQTT server keeps the connection open and pushes all requests.
  </li>
</ul>

</article>
