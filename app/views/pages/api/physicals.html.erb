<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#physical-overview">Overview</a></td></tr>
    <tr><td>&raquo; <a href="#hardware-solutions">Hardware solutions</a></td></tr>
    <tr><td>&raquo; <a href="#implemnetation">Physical API Implementation</a></td></tr>
    <tr><td class='inside'>&raquo; <a href="#creating-device-resource">Creating the device resource</a></td></tr>
    <tr><td class='inside'>&raquo; <a href="#receiving-property-updates">Receiving updates from Lelylan</a></td></tr>
    <tr><td class='inside'>&raquo; <a href="#sending-property-updates">Sending updates to Lelylan</a></td></tr>
    <tr><td class='inside'>&raquo; <a href="#physical-device-access">Physical access definition</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="physical-devices"><%= title %></a></h1>

<p>
Physical devices are the objects you interact with everyday of your life like lights,
appliances, alarms and more. To enable the communication between Lelylan and the physical
world, the physical device should implement the Physical API.
<p>

<p>
To make things simple physical devices are characterized uniquely by their properties. This makes
physical devices easy to build, still giving the chance to extend their functionalities by adding
new services (e.g. functions, rules engines, sceneries, etc.) on top of Lelylan.
<p>

</article>

</br>

<article>

<h1 class="call"><a name="physical-overview">Request flow</a></h1>

<%= render 'shared/animations/physical_device' %>

</article>

</br>

<article>

<h1 class="call"><a name="hardware-solutions">Hardware solutions</a></h1>

<p>
To build a physical device you can use different hardware solutions varying
on <strong>computational power</strong>, <strong>wireless capability</strong>
and <strong>budget</strong>.
</p>

<table>
  <thead>
    <tr>
      <td><strong>MODEL</strong></td>
      <td><strong>DESCRIPTION</strong></td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="http://www.arduino.cc/">Arduino</a></td>
      <td>
        Open-source electronics prototyping platform.
      </td>
    </tr>
    <tr>
      <td><a href="http://electricimp.com/">Electric imp</a></td>
      <td>
        A complete and cheap solution to connect devices to the internet, wirelessly.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.raspberrypi.org/">Raspberry Pi</a></td>
      <td>
        Credit-card sized computer as ARM GNU/Linux box for $25.
      </td>
    </tr>
    <tr>
      <td><a href="http://nanode.eu/">Nanode</a></td>
      <td>
        Open-source Arduino-like board that has in-built web connectivity.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.openpicus.com/">openPICUS</a></td>
      <td>
        Platform to control and communication for your electronic devices through the web.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.libelium.com/">Libelium</a></td>
      <td>
        Hardware technology for the implementation of wireless sensor networks.
      </td>
    </tr>
    <tr>
      <td><a href="http://netduino.com/">Netduino</a></td>
      <td>
        Open-source electronics platform using the .NET Micro Framework.
      </td>
    </tr>
    <tr>
      <td><a href="http://developer.android.com/tools/adk/index.html">Android ADK</a></td>
      <td>
        Designed to let hardware builders and software developers create accessories for Android.
      </td>
    </tr>
    <tr>
      <td><a href="http://rascalmicro.com/">The Rascal</a></td>
      <td>
        Small computer to monitor and control the world remotely.
      </td>
    </tr>
    <tr>
      <td><a href="http://pandaboard.org/">Beagle Board</a></td>
      <td>
        Open OMAP 4 mobile software development platform.
      </td>
    </tr>
    <tr>
      <td><a href="http://www.plugcomputer.org/">Plug Computer</a></td>
      <td>
        Small form factor server.
      </td>
    </tr>
  </tbody>
</table>

<p>
If you think we are missing a good hardware solution and if you want to help us
hacking the existing one
<a href="http://twitter.com/#!/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us.
We are continuosly seeking for new projects and collaborations.
</p>

</article>

</br></br>

<article>

<h1 class="call"><a name="implemnetation">Physical API Implementation</a></h1>

<p>
  To connect a physical device to Lelylan you need to follow four steps.
</p>

<ul>
  <li><a href="#creating-device-resource">Create the device resource using Lelylan Dashboard</a></li>
  <li><a href="#receiving-property-updates">Let the physical device receive updates from Lelylan</a></li>
  <li><a href="#sending-property-updates">Let the physical device send updates to Lelylan</a></li>
  <li><a href="#set-physical-device-uri">Set the physical device URI</a></li>
</ul>

<p class="notice">
  <span class="label warning">todo</span>
  Read "<a href="/start/physical/">connect your first physical device</a>" to see a complete
  tutorial explaining how to connect a physical device.
</p>

</article>

<br/>

<article>

<h2 class="call"><a name="creating-device-resource">Create the device resource</a></h2>

<p>
The easiest way to create a new device is to use <a href="http://manage.lelylan.com">Lelylan Dashboard</a>.
Simply click the <a href="http://manage.lelylan.com/new">create device</a> link and fill the form
with a name and the device type you want to create. For the moment leave empty the physical field
(we'll come back on that <a href="#set-physical-device-uri">later</a>).
<p>
<div class="overlay">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-create.png') %>
      <div class="ao-annotations">
        <span style="top: 5%; left: 28%; width: 140px;" class="from-right">Create link</span>
      </div>
    </div>
  </div>
</div>

<br/>

<p class="notice">
  <span class="label">notice</span>
  If you can't find the desired type create your own using <a href="http://types.lelylan.com">Lelylan Types</a>.
</p>

<p>
  At this point you'll see a detailed view of your device. Click on <code>settings</code>
  and access to all information you'll need to implement the physical device API.
</p>

<ul>
  <li><strong>Type link</strong> - Link to the type properties the physical device needs to accept.</li>
  <li><strong>Device URI</strong> - URI where the physical sends the updates.</li>
  <li><strong>Device secret</strong> - Secret code used for the communication between Lelylan and the physical device.</li>
</ul>

<div class="overlay" style="margin-left: 190px;">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-component.png') %>
      <div class="ao-annotations">
        <span style="top: 7.5%; left: 78%; width: 140px;" class="from-right">Settings link</span>
        <span style="top: 71%; left: 97%; width: 140px;" class="from-right">Type link</span>
        <span style="top: 79%; left: -66%; width: 140px;">Device URI</span>
        <span style="top: 86.5%; left: 97%; width: 140px;" class="from-right">Device secret</span>
      </div>
    </div>
  </div>
</div>

<br/>
</article>

<br/>

<article>

<h2 class="call"><a name="receiving-property-updates">Receiving updates from Lelylan</a></h2>

<p>
When a user <a href="/api/devices#update-properties">updates a device property</a> or
<a href="/api/devices#execute-a-function">executes a function</a> using Lelylan, a request
with the list of properties to update is sent to the physical device. This is why the physical
device must be able to recognize the device properties and apply the desired changes.
</p>

<h4>Example Resource URL</h4>

<div class="preview">
<pre><code>PUT http://arduino.house.com/physical-id</code></pre>
</div>

<h4>Sent Headers</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>X-Physical-Secret</span>
        <span class="info">required</span>
      </td>
      <td>
        The device <a href="/api/devices#get-a-device-private-info">secret</a>.
        The physical device needs it to reject not valid requests.
      </td>
    </tr>
  </tbody>
</table>

<h4>Sent Params</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to change in the physical world.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Desired property value.
      </td>
    </tr>
  </tbody>
</table>

<h4>Example Request</h4>

<p>
Follows a sample request a device must be able to solve.
</p>

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-physical-device-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-physical-device-properties-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-physical-device-properties-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#update-physical-device-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#update-physical-device-properties-python" data-toggle="tab" class="python">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-physical-device-properties-curl">
    <div class="preview">
      <pre><xmp>curl -X PUT <physical-device-uri> \
     -H 'Content-Type: application/json' \
     -H 'X-Physical-Secret: <secret>' \
     -d '{ "properties": [{ "id": "<status>", "value": "on" }] }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')();
var uri = '<physical-device-uri>'; // physical device URI you want to interact with
var secret = '<secret>'; // see dev.lelylan.com/api/devices#get-a-device-private-info
var params = { 'properties': [{ 'id': '<status>', 'value': 'on' }] };

Lelylan.Physical.properties(uri, secret, params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, $resource) {
      var uri = '<physical-device-uri>'; // physical device URI you want to interact with
      var secret = '<secret>';  // see dev.lelylan.com/api/devices#get-a-device-private-info
      var params = { 'properties': [{ 'id': '<status>', 'value': 'on' }] };

      var action = { update: { method: 'PUT', headers: { 'X-Physical-Secret': secret } } };
      var Physical = $resource(uri, {}, action);

      $scope.physical = new Physical(params);
      $scope.physical.$update();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new
uri = '<physical-device-uri>' # physical device URI you want to interact with
secret = '<secret>'; # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on' }] }

response = lelylan.physical_properties(uri, secret, params)</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-python">
    <div class="preview">
      <pre class="prettyprint"><xmp>uri = '<physical-device-uri>' # physical device URI you want to interact with
secret = '<secret>'; # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on' }] }

from lelylan import physical
response = receive_update(uri, secret, params)</xmp></pre>
    </div>
  </div>
</div>

<h4>Example header response</h4>

<div class="preview"><pre><code>HTTP/1.1 202 Accepted</code></pre></div>

<h4 id="device-representation">Example body response</h4>

<div class="preview"><pre><code>{ "status": "202" }</code></pre></div>

<p>
Lelylan ignores the response body. When the physical device accepts a requests sends back
a <a href="https://tools.ietf.org/html/rfc2616#section-10.2.3">202 response</a>. Only later,
when the desired changes are applied, the physical device
<a href="#sending-property-updates">sends the updates to Lelylan</a>.
</p>

</article>

<br/>

<article>

<h2 class="call"><a name="sending-property-updates">Sending updates to Lelylan</a></h2>

<p>
When a physical device change its status through a physical interaction, a request with the
list of updated properties need to be sent to Lelylan, more exactly to the device URI.
</p>

<h4>Example Resource URL</h4>
<div class="preview">
<pre><code>PUT http://api.lelylan.com/devices/:id/properties</code></pre>
</div>

<h4>Sent Headers</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>X-Physical-Secret</span>
        <span class="info">required</span>
      </td>
      <td>
        The <a href="/api/devices#get-a-device-private-info">device secret</a>.
        Lelylan needs it to reject not valid requests.
      </td>
    </tr>
  </tbody>
</table>

<h4>Example Request</h4>

<p>
Most of the time the physical device needs to update the device properties. Here an example.
</p>

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-device-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-device-properties-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-device-properties-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#update-device-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#update-device-properties-python" data-toggle="tab" class="python">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-device-properties-curl">
    <div class="preview">
      <pre><xmp>curl -X PUT http://api.lelylan.com/devices/<id>/properties \
    -H 'X-Physical-Secret: <secret>' \
    -H 'Content-Type: application/json' \
    -d '{ "properties": [{ "id": "<status>", "value": "on", "pending": false }] }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')();
var uri = 'http://api.lelylan.com/devices/<id>/properties'; // device property API
var secret = '<secret>'; // see dev.lelylan.com/api/devices#get-a-device-private-info
var params = { 'properties': [{ 'id': '<status>', 'value': 'on', 'pending': false }] };

Lelylan.Physical.properties(uri, secret, params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, $resource) {
      var uri = 'http://api.lelylan.com/devices/<id>/properties'; // device property API
      var secret = '<device-secret>'; //see dev.lelylan.com/api/devices#get-a-device-private-info
      var params = { 'properties': [{ 'id': '<status>', 'value': 'on', 'pending': false }] };

      var action = { update: { method: 'PUT', headers: { 'X-Physical-Secret': secret } } };
      var Physical = $resource(uri, {}, action);

      $scope.physical = new Physical(params);
      $scope.physical.$update();
    }
  </script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"/></script>
  <script src="//cdn.lelylan.com/angular/0.1/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new
uri = 'http://api.lelylan.com/devices/<id>/properties' # device property API
secret = '<device-secret>' # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on', pending: false }] }
response = lelylan.physical_properties(uri, secret, params)</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-python">
    <div class="preview">
      <pre class="prettyprint"><xmp>uri = 'http://api.lelylan.com/devices/<id>/properties' # device property API
secret = '<device-secret>' # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on', pending: false }] }

from lelylan import physical
response = receive_update(uri, secret, params)</xmp></pre>
    </div>
  </div>
</div>

<h4>Accessible services</h4>

<p>
  A physical device has access to a limited set of services in Lelylan.
</p>

<ul>
  <li>
  <strong><a href="/api/devices#update-a-device">Update device</a></strong>
  </li>
  <li>
  <strong><a href="/api/devices#update-properties">Update device properties</a></strong>
  </li>
</ul>

</article>

<br/>

<article>

<h2 class="call"><a name="physical-device-access">Physical access definition</a></h2>

<p>
Physical devices must be accessible from the Internet in order to be used by Lelylan.
A common solution is to associate a URI to the physical device and directly
communicate with it. Anyway other solutions based on communication protocols like
<a href="http://mqtt.org/">MQTT</a> and
<a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
can simplify a lot the developer life.
</p>

<ul>
  <li>
  <strong><a name="physical-direct">Direct URI</a></strong> -
  The physical device is directly accessible through a URI. Use a static
  IP Address or create a Tunnel using solutions like
  <a href="http://progrium.com/localtunnel/">Local Tunnel</a>,
  <a href="https://forwardhq.com/">Forward</a> or
  <a href="http://tunnlr.com/">Tunnlr</a>).
  </li>

  <li>
  <strong><a name="physical-websocket">WebSocket</a></strong> -
  <span class="label warning">in progress</span>
  The physical device is connected to a <a href="http://en.wikipedia.org/wiki/WebSocket">WebSocket</a>
  server as a client. The WebSocket server keeps the connection open and pushes all requests.
  </li>

  <li>
  <strong><a name="physical-mqtt">MQTT</a></strong> -
  <span class="label warning">in progress</span>
  The physical device is connected to a <a href="http://mqtt.org/">MQTT</a> server as a client.
  The MQTT server keeps the connection open and pushes all requests.
  </li>
</ul>

<p>
Once the physical device is accessible, set the Physical URI in the device and you are done.
Interact with the device component and see if everything works.
</p>


<div class="overlay">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-component-update.png') %>
      <div class="ao-annotations">
        <span style="top: 12%; left: 78%; width: 140px;" class="from-right">Settings link</span>
        <span style="top: 68.5%; left: 99%; width: 140px;" class="from-right">Physical URI Field</span>
      </div>
    </div>
  </div>
</div>

<br/>

<p class="notice">
<span class="label">notice</span>
If you think we are missing a smart way to connect a physical device or
you want to help us creating a new one, <a href="http://twitter.com/#!/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us.
</p>

</article>

<br/>
<br/>

<article>

<h1 class="call"><a>What's next?</a></h1>

<nav class="nav-intro">
<ul>
  <li>
  <a href="/api/types" title="">
    <span class="icon"><i aria-hidden="true" class="icon-blog"></i></span>
    <span>Types API <span class="small"> | structuring the connected home</span></span>
  </a>
  </li>
</ul>
</nav>

<div class="clearfix">

</article>
