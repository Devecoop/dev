<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#registration">Registration</a></td></tr>
    <tr><td>&raquo; <a href="#oauth-flows">Oauth Flows</a></td></tr>
    <tr><td class='inside'>&raquo; <a href="#authorization-code">Authorization Code Flow</a></td></tr>
    <tr><td class='inside'>&raquo; <a href="#implicit-grant">Implicit Grant Flow</a></td></tr>
    <tr><td class='inside'>&raquo; <a href="#password-credentials">Password Credentials</a></td></tr>
    <tr><td>&raquo; <a href="#refresh-access-token">Refresh access token</a></td></tr>
    <tr><td>&raquo; <a href="#api-requests">API requests</a></td></tr>
    <tr><td>&raquo; <a href="#scopes">Scopes</a></td></tr>
    <tr><td>&raquo; <a href="#filtering-resources">Filtering resources</a></td></tr>
    <tr><td>&raquo; <a href="#expiring-token">Expiring token</a></td></tr>
    <tr><td>&raquo; <a href="#more-information">More information</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="functions"><%= title %></a></h1>

<p>
Lelylan API uses the OAuth 2.0 protocol for authentication and authorization.
OAuth lets users grant the access to the desired resources to third party applications,
giving them the possibility to enable and disable those accesses whenever they want.
</p>

</article>

</br>

<article>

<h1 class="call"><a name="registration">Registration</a></h1>

<p>
All developers need to <%= link_to 'register their applications', "#{people_host}/oauth/applications" %>
before getting started. A registered OAuth application is assigned with a unique
Client ID and Client Secret.
</p>

</article>

</br>

<article>

<h1 class="call"><a name="oauth-flows">OAuth Flows</a></h1>

<p>
Lelylan supports the following flows.
</p>

<ul>
  <li>
  <a href="#authorization-code" class="bigger">Authorization Code Flow</a>
  for apps with servers that can store persistent information.
  </li>
  <li>
  <a href="#implicit-grant" class="bigger">Implicit Grant Flow</a> for apps
  running in a browser (read Javascript) or mobile apps.
  </li>
  <li>
  <a href="#password-credentials" class="bigger">Password Credentials</a> when previous
  flows can't be used or during development.
  </li>
</ul>

</article>

<article>

<h2><a name="authorization-code">Authorization Code</a></h2>

<p>
The Authorization Code flow is made up from two parts. At first your application
asks to the user the permission to access their data. If the user approves Lelylan
sends to the client an authorization code. In the second part, the client POST the
authorization code along with its client secret to the Lelylan in order to get the
access token.
</p>

<h3><a name="authorization-code-redirect">1. Redirect the user to the authorization page</a></h3>

<p>
Redirect the user to the authorization endpoint.
<p>

<div class="preview"><pre><code class="no-highlight">http://people.lelylan.com/oauth/authorization?
       response_type=&lt;code&gt;&
       client_id=&lt;client_id&gt;&
       redirect_uri=&lt;redirect_uri&gt;&
       scope=&lt;scope&gt;&
       state=&lt;state&gt;</code></pre></div>

<dl>
  <dd><span>response_type</span> -
  Always use 'code' as response type.</dd>
  <dd><span>client_id</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client ID.</dd>
  <dd><span>redirect_uri</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %>
  application URI where the user is redirected after authorization.</dd>
  <dd><span>scope</span> -
  Application privileges. <a href="#scopes">Learn more about</a>.</dd>
  <dd><span>state</span> -
  Optional opaque value used by the client to maintain state between the request and callback.</dd>
</dl>

<p>
If the user grants the access, Lelylan redirects the user to <code>redirect_uri</code>
and appends the authorization code in the query string. This code will be used to get
the final access token.
</p>

<div class="preview"><pre><code class="no-highlight">http://example.com/redirect-uri?code=code&state=state</code></pre></div>

<h3><a name="authorization-code-access-token">2. Get the access token</a></h3>

<p>
Get the access token (remember to basic authenticate with client id and client secret).
<p>

<div class="preview"><pre><code class="no-highlight">curl -X POST http://people.lelylan.com/oauth/token \
     -u  &lt;client_id&gt;:&lt;client_secret&gt; \
     -d 'grant_type=authorization_code' \
     -d 'code=&lt;code&gt;' \
     -d 'redirect_uri=&lt;redirect_uri&gt;'</code></pre>
</div>

<dl>
  <dd><span>client_id</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client ID.</dd>
  <dd><span>client_secret</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client secret.</dd>
  <dd><span>grant_type</span> -
  Always use 'authorization_code' as grant type.</dd>
  <dd><span>code</span> -
  Authorization code (from the previous step).</dd>
  <dd><span>redirect_uri</span> -
  Application URI where the user is redirected after authorization.</dd>
</dl>

<div class="preview unified"><pre><code class="no-highlight">HTTP/1.1 200 OK</code></pre></div>

<div class="preview"><pre><code>{
  "access_token": "4adc339e06c20e84c41d0c04c8ad5daf89cc3655d79b399930d112f5f7fXXXXX",
  "refresh_token": "ec1a59d298aa51b3f133b6135b817bb19eb917aac5bc7821d410ffbf5ebXXXXX",
  "token_type": "bearer",
  "expires_in": 7200
}</code></pre></div>

</article>

<article>

<h2><a name="implicit-grant">Implicit Grant</a></h2>

<p>
This flow is meant for Javascript-based web applications that can't maintain state
over time (it includes Actionscript, Silverlight and similar).
The flow starts redirecting the user to the authorization endpoint.
<p>

<div class="preview"><pre><code class="no-highlight">http://people.lelylan.com/oauth/authorization?
       response_type=&lt;token&gt;&
       client_id=&lt;client_id&gt;&
       redirect_uri=&lt;redirect_uri&gt;&
       scope=&lt;scope&gt;&
       state=&lt;state&gt;</code></pre>
</div>

<dl>
  <dd><span>response_type</span> -
  Always use 'token' as response type.</dd>
  <dd><span>client_id</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client ID.</dd>
  <dd><span>redirect_uri</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %>
  application URI where the user is redirected after authorization.</dd>
  <dd><span>scope</span> -
  Application privileges. <a href="#scopes">Learn more about</a>.</dd>
  <dd><span>state</span> -
  Optional opaque value used by the client to maintain state between the request and callback.</dd>
</dl>

<p>
If the user grants the access, Lelylan redirects the user to <code>redirect_uri</code>
and appends the access token to the <a href="http://en.wikipedia.org/wiki/Fragment_identifier">fragment URI</a>.
</p>

<div class="preview"><pre><code class="no-highlight">http://example.com/redirect-uri#
       access_token=1146eeea7054e3fc39aebb0f3820742981c65e243a2fa85174ce98b564XXXXX&
       token_type=bearer&
       expires_in=7200&
       state=remember-me</code></pre></div>

<p>
If your application is pure Javascript, you can easily parse the token from the URI.
If your application is a native phone app you perform the flow in an embedded webview and
redirect the user to a dummy website where you can grab the token from the URL.
</p>

</article>

<article>

<h2><a name="password-credentials">Password Credentials</a></h2>

<p>
This flow is suitable when the resource owner has a trust relationship
with the client, such as its computer operating system or a highly privileged application.
Use this flow only when other flows are not viable or when you need a fast way to test
your application.
</p>

<p>
Get the access token (remember to basic authenticate with client id and client secret).
<p>

<div class="preview"><pre><code class="no-highlight">curl -X POST http://people.lelylan.com/oauth/token \
     -u &lt;client_id&gt;:&lt;client_secret&gt; \
     -d 'grant_type=password' \
     -d 'username=&lt;email&gt;' \
     -d 'password=&lt;password&gt;' \
     -d 'scope=&lt;scope&gt;</code></pre>
</div>

<dl>
  <dd><span>client_id</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client ID.</dd>
  <dd><span>client_secret</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client secret.</dd>
  <dd><span>grant_type</span> -
  Always use 'password' as grant type.</dd>
  <dd><span>username</span> -
  <%= link_to 'Registered', "#{people_host}/users/edit" %> user email.</dd>
  <dd><span>password</span> -
  <%= link_to 'Registered', "#{people_host}/users/edit" %> user password.</dd>
  <dd><span>scope</span> -
  Application privileges. <a href="#scopes">Learn more about</a>.</dd>
</dl>

<div class="preview unified"><pre><code class="no-highlight">HTTP/1.1 200 OK</code></pre></div>

<div class="preview"><pre><code>{
  "access_token": "4adc339e06c20e84c41d0c04c8ad5daf89cc3655d79b399930d112f5f7fXXXXX",
  "refresh_token": "ec1a59d298aa51b3f133b6135b817bb19eb917aac5bc7821d410ffbf5ebXXXXX",
  "token_type": "bearer",
  "expires_in": 7200
}</code></pre></div>

<p class="notice">
<span class="label">Notice</span>
Lelylan cares about applications using this flow and can block it whenever
the security for the final user is compromised. If using this flow in production
<a href="/community/support">contact us</a>.
</p>

</article>

</br>

<article>

<h1 class="call"><a name="refresh-access-token">Refresh Access Token</a></h1>

<p>
For security reasons an access token expires every two hours. To get a new one
use the refresh token you previously received together with the access token.
<p>

<div class="preview"><pre><code class="no-highlight">curl -X POST http://people.lelylan.com/oauth/token \
     -u &lt;client_id&gt;:&lt;client_secret&gt; \
     -d 'grant_type=refresh_token' \
     -d 'refresh_token=&lt;refresh-token&gt;'</code></pre>
</div>

<dl>
  <dd><span>client_id</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client ID.</dd>
  <dd><span>client_secret</span> -
  <%= link_to 'Registered', "#{people_host}/oauth/applications" %> Client secret.</dd>
  <dd><span>grant_type</span> -
  Always use 'refresh_token' as grant type.</dd>
  <dd><span>refresh_token</span> -
  Refresh token code (from previous access token request).</dd>
</dl>

<div class="preview unified"><pre><code class="no-highlight">HTTP/1.1 200 OK</code></pre></div>

<div class="preview"><pre><code>{
  "access_token": "4adc339e06c20e84c41d0c04c8ad5daf89cc3655d79b399930d112f5f7fXXXXX",
  "refresh_token": "ec1a59d298aa51b3f133b6135b817bb19eb917aac5bc7821d410ffbf5ebXXXXX",
  "token_type": "bearer",
  "expires_in": 7200
}</code></pre></div>
</div>

<p>
Use the <code>access_token</code> to make requests to Lelylan API.
</p>

</article>

</br>

<article>

<h1 class="call"><a name="api-requests">API requests</a></h1>

<p>
Once you have the access token you can access the API in different ways.
</p>

<p><strong>Authorization header</strong></p>

<div class="preview"><pre><code class="no-highlight">curl http://api.lelylan.com/devices.json
     -H "Authorization: Bearer &lt;token&gt;"</code></pre>
</div>

<p><strong>Query string access_token param</strong></p>

<div class="preview"><pre><code class="no-highlight">curl http://api.lelylan.com/devices?access_token=&lt;token&gt;</code></pre></div>

<p><strong>Body access_token param</strong></p>

<div class="preview"><pre><code class="no-highlight">curl http://api.lelylan.com/devices
     -X POST -d 'access_token=&lt;token&gt;'</code></pre>
</div>

<p class="notice">
<span class="label">Notice</span>
Public services does not need an access token.
</p>

</article>

</br>

<article>

<h1 class="call"><a name="scopes">Scopes</a></h1>

<p>
Scopes let you specify what can and can't be accessed from a third party application. </br>
When no scopes are defined <code>user</code> is the default one.
</p>

</br>

<table class="zebra-striped">
  <thead>
    <tr>
      <th style="width:260px;">SCOPE</th>
      <th>SERVICES</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <code>resources</code>
        <span class="info">Full access to all services.</span>
        <span class="info">The <a href="/api/devices/#get-a-device-private-info">private</a> service is not included.</span>
      </td>
      <td><span class="label">all services</span></td>
    </tr>
    <tr>
      <td>
        <code>resources:read</code>
        <span class="info">Full access to all read resources.</span>
        <span class="info">The <a href="/api/devices/#get-a-device-private-info">private</a> service is not included.</span>
      </td>
      <td><span class="label">all read only services</span></td>
    </tr>
    <tr>
      <td>
        <code>devices</code>
        <span class="info">Read, control and write access to owned devices.</span>
      </td>
      <td>
        <span class="label link"><a href="/api/devices#get-a-device">get a device</a></span>
        <span class="label link"><a href="/api/devices#get-all-devices">get all devices</a></span>
        <span class="label link"><a href="/api/devices#create-a-device">create a device</a></span>
        <span class="label link"><a href="/api/devices#update-a-device">update a device</a></span>
        <span class="label link"><a href="/api/devices#delete-a-device">delete a device</a></span>
        <span class="label link"><a href="/api/devices#update-properties">update properties</a></span>
        <span class="label link"><a href="/api/devices#execute-a-function">execute a function</a></span>
        <span class="label link"><a href="#activate-a-device">activate a device</a></span>
        <span class="label link"><a href="#deactivate-a-device">deactivate a device</a></span>
      </td>
    </tr>
    <tr>
      <td>
        <code>devices:control</code>
        <span class="info">Read and control access to owned devices.</span>
        </td>
      <td>
        <span class="label link"><a href="/api/devices#get-a-device">get a device</a></span>
        <span class="label link"><a href="/api/devices#get-all-devices">get all devices</a></span>
        <span class="label link"><a href="/api/devices#update-a-device">update a device</a></span>
        <span class="label link"><a href="/api/devices#update-properties">update properties</a></span>
        <span class="label link"><a href="/api/devices#execute-a-function">execute a function</a></span>
      </td>
    </tr>
    <tr>
      <td>
        <code>devices:read</code>
        <span class="info">Read access to owned devices.</span>
      </td>
      <td>
        <span class="label link"><a href="/api/devices#get-a-device">get a device</a></span>
        <span class="label link"><a href="/api/devices#get-all-devices">get all devices</a></span>
      </td>
    </tr>
    <%#<tr>%>
      <%#<td>%>
        <%#<code>consumptions</code>%>
        <%#<span class="info">Read and write access to owned <br/> consumptions</span>%>
      <%#</td>%>
      <%#<td>%>
        <%#<span class="label link"><a href="/api/devices/consumptions#get-a-consumption">Get a consumption</a></span>%>
        <%#<span class="label link"><a href="/api/devices/consumptions#get-all-consumptions">Get all consumptions</a></span>%>
        <%#<span class="label link"><a href="/api/devices/consumptions#create-a-consumption">Create a consumption</a></span>%>
        <%#<span class="label link"><a href="/api/devices/consumptions#update-a-consumption">Update a consumption</a></span>%>
        <%#<span class="label link"><a href="/api/devices/consumptions#delete-a-consumption">Delete a consumption</a></span>%>
      <%#</td>%>
    <%#</tr>%>
    <%#<tr>%>
       <%#<td>%>
        <%#<code>consumptions:read</code>%>
        <%#<span class="info">Read access to owned consumptions</span>%>
      <%#</td>%>
      <%#<td>%>
        <%#<span class="label link"><a href="/api/devices/consumptions#get-a-consumption">Get a consumption</a></span>%>
        <%#<span class="label link"><a href="/api/devices/consumptions#get-all-consumptions">Get all consumptions</a></span>%>
      <%#</td>%>
    <%#</tr>%>
    <tr>
       <td>
        <code>histories:read</code>
        <span class="info">Read access to owned histories</span>
      </td>
      <td>
        <span class="label link"><a href="/api/devices/histories#get-a-history">Get a history</a></span>
        <span class="label link"><a href="/api/devices/histories#get-all-histories">Get all histories</a></span>
      </td>
    </tr>
    <tr>
      <td>
        <code>types</code>
        <span class="info">Read and write access to owned types.</span>
      </td>
      <td>
        <span class="label link"><a href="/api/types#get-a-type">Get a type</a></span>
        <span class="label link"><a href="/api/types#get-all-types">Get all types</a></span>
        <span class="label link"><a href="/api/types#create-a-type">Create a type</a></span>
        <span class="label link"><a href="/api/types#update-a-type">Update a type</a></span>
        <span class="label link"><a href="/api/types#delete-a-type">Delete a type</a></span>
        <span class="label link"><a href="/api/types/properties/#get-a-property">Get a property</a></span>
        <span class="label link"><a href="/api/types/properties/#get-all-properties">Get all properties</a></span>
        <span class="label link"><a href="/api/types/properties/#create-a-property">Create a property</a></span>
        <span class="label link"><a href="/api/types/properties/#update-a-property">Update a property</a></span>
        <span class="label link"><a href="/api/types/properties/#delete-a-property">Delete a property</a></span>
        <span class="label link"><a href="/api/types/functions#get-a-function">Get a function</a></span>
        <span class="label link"><a href="/api/types/functions#get-all-functions">Get all functions</a></span>
        <span class="label link"><a href="/api/types/functions#create-a-function">Create a function</a></span>
        <span class="label link"><a href="/api/types/functions#update-a-function">Update a function</a></span>
        <span class="label link"><a href="/api/types/functions#delete-a-function">Delete a function</a></span>
        <span class="label link"><a href="/api/types/statuses#get-a-status">Get a status</a></span>
        <span class="label link"><a href="/api/types/statuses#get-all-statuses">Get all statuses</a></span>
        <span class="label link"><a href="/api/types/statuses#create-a-status">Create a status</a></span>
        <span class="label link"><a href="/api/types/statuses#update-a-status">Update a status</a></span>
        <span class="label link"><a href="/api/types/statuses#delete-a-status">Delete a status</a></span>
      </td>
    </tr>
    <tr>
      <td>
        <code>types:read</code>
        <span class="info">Read access to owned types.</span>
      </td>
      <td>
        <span class="label link"><a href="/api/types#get-a-type">Get a type</a></span>
        <span class="label link"><a href="/api/types#get-all-types">Get all types</a></span>
        <span class="label link"><a href="/api/types/properties/#get-a-property">Get a property</a></span>
        <span class="label link"><a href="/api/types/properties/#get-all-properties">Get all properties</a></span>
        <span class="label link"><a href="/api/types/functions#get-a-function">Get a function</a></span>
        <span class="label link"><a href="/api/types/functions#get-all-functions">Get all functions</a></span>
        <span class="label link"><a href="/api/types/statuses#get-a-status">Get a status</a></span>
        <span class="label link"><a href="/api/types/statuses#get-all-statuses">Get all statuses</a></span>
      </td>
    </tr>
    <tr>
      <td>
        <code>locations</code>
        <span class="info">Read and write access to owned locations</span>
      </td>
      <td>
        <span class="label link"><a href="/api/locations#get-a-location">Get a location</a></span>
        <span class="label link"><a href="/api/locations#get-all-locations">Get all locations</a></span>
        <span class="label link"><a href="/api/locations#create-a-location">Create a location</a></span>
        <span class="label link"><a href="/api/locations#update-a-location">Update a location</a></span>
        <span class="label link"><a href="/api/locations#delete-a-location">Delete a location</a></span>
      </td>
    </tr>
    <tr>
       <td>
        <code>locations:read</code>
        <span class="info">Read access to owned locations</span>
      </td>
      <td>
        <span class="label link"><a href="/api/locations#get-a-location">Get a location</a></span>
        <span class="label link"><a href="/api/locations#get-all-locations">Get all locations</a></span>
      </td>
    </tr>
    <tr>
      <td>
        <code>privates</code>
        <span class="info">Access to the owned devices private info.</span>
      </td>
      <td>
        <span class="label link"><a href="/api/devices/#get-a-device-private-info">Get a device private info</a></span>
      </td>
    </tr>
    <tr>
      <td>
        <code>user</code>
        <span class="info">Read access to user profile</span>
      </td>
      <td>
        <span class="label">Get /me</span>
      </td>
    </tr>
  </tbody>
</table>

<p><strong>Example</strong></p>

<p>
In the following request an application requires read access for all resources and write
access for all devices. You can specify multiple scopes by separating them with a space
(encoded as a <code>+</code>).
<p>

<div class="preview"><pre><code class="no-highlight">http://people.lelylan.com/oauth/authorization?
        response_type=code&
        client_id=client_id&
        redirect_uri=redirect_uri&
        scope=resources:read+devices</code></pre>
</div>

</article>

</br>

<article>

<h1 class="call"><a name="filtering-resources">Filtering resources</a></h1>

<p>
Lelylan offers a detailed control about the resource a third party application can
access. Simply click to the <strong>Filter Accessible Devices</strong> button (in the
authorization page) and add the desired accessible devices.
</p>

<%# image_tag('oauth-filter.png', class: 'img-rounded') %>

<p>
A user can filter a specific device or all devices contained into a location.
In case you add all devices contained in a location (keep in mind that when new
ones are added into the location, the access to them is not inherited, and a new
authorization is needed).
</p>

</article>

</br>

<article>

<h1 class="call"><a name="expiring-token">Expiring token</a></h1>

<p>
When authorizing a third party application an access token expires in 2 hours.
After this period of time a new token must be <a href="#refresh-access-token">
refreshed</a>.
</p>

<%= image_tag('oauth-expire.png', class: 'img-polaroid') %>

<p>
Anyway, when developing your applications a not expiring token could be something
useful. Simply uncheck the <strong>Expiring token</strong> checkbox.
</p>

</article>

</br>

<article>

<h1 class="call"><a name="more-information">More information</a></h1>

<p>
It can be a little tricky to get started with OAuth 2. Here are a few links that
might be of help.
</p>

<ul>
  <li>
  <a href="https://developers.google.com/accounts/docs/OAuth2" class="bigger">Google</a>
  </li>
  <li>
  <a href="http://developers.facebook.com/docs/authentication/" class="bigger">Facebook</a>
  </li>
  <li>
  <a href="http://developer.github.com/v3/oauth/" class="bigger">Github</a>
  </li>
  <li>
  <a href="http://developer.foursquare.com/overview/auth" class="bigger">Foursquare</a>
  </li>
  <li>
  <a href="http://github.com/intridea/oauth2" class="bigger">OAuth2 Gem</a>
  </li>
  <li>
  <a href="/community/clients/" class="bigger">Lelylan Client Libraries</a>
  </li>
</ul>

</article>
