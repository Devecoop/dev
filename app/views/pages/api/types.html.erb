<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#get-a-type">Get a type</a></td></tr>
    <tr><td>&raquo; <a href="#get-all-types">Get all types</a></td></tr>
    <tr><td>&raquo; <a href="#create-a-type">Create a type</a></td></tr>
    <tr><td>&raquo; <a href="#update-a-type">Update a type</a></td></tr>
    <tr><td>&raquo; <a href="#delete-a-type">Delete a type</a></td></tr>
    <tr><td>&raquo; <a href="#categories">Get type categories</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="types"><%= title %></a></h1>

<p>
A type describes the structure of a device.
In its simplest form every type can be defined as the combination of three key elements.

</p>

<ul>
  <li><a href="/api/types/properties/">Properties</a> - what vary during time.</li>
  <li><a href="/api/types/functions/">Functions</a> - what a device can do.</li>
  <li><a href="/api/types/statuses/">Statuses</a> - what a device is in a specific time of its life.</li>
</ul>

<p>
Here an example describing a simplified dimmer type.
</p>

<table>
  <tbody>
    <tr><td><strong>Properties</strong></td><td>stauts, intensity</td></tr>
    <tr><td><strong>Functions</strong></td><td>turn on, turn off, set intensity</td></tr>
    <tr><td><strong>Statuses</strong></td><td>light on, light off</td></tr>
  </tbody>
</table>

</article>

<article>

<h2 class="call"><a name="start">Getting Started</a></h2>

<p>
The simplest way to get started with the Types API is to use <a href="http://types.lelylan.com">Lelylan Types</a>.
It gives you everything you need to find, define and discuss any device structure in an open
and collaborative way.
</p>

<a href="http://types.lelylan.com">
<%= image_tag('types-dashboard-ng.png', class: 'img-polaroid') %>
</a>

<p>
  Lelylan Types is available on <a href="https://github.com/lelylan/types-dashboard-ng/">Github</a>.
</p>

</article>

<article>

<h2 class="call"><a name="need">Do I need to learn the Types API?</a></h2>

<p>
<strong>Not really</strong>. If all you need is to search or define a device type just use
<a href="http://types.lelylan.com">Lelylan Types</a>.
</p>

<p>
But, if you want to fully understand how a device works, this is the right place
where to start. It will be a little tricky to get started with types at first. When you
will see its json structure it will appear to be quite complex, but it's not.
It simply combines three resources:
<a href="/api/types/properties/">properties</a>,
<a href="/api/types/functions/">functions</a> and
<a href="/api/types/statuses/">statuses</a>.
</p>

</article>

<br>

<article>

<h1 class="call"><a name="get-a-type">GET /types/:id</a></h1>

<p>

Returns extended information for a given <a href="/api/core/#public-resources">public</a>
type identified from its ID.
</p>

<h4>Resource URL</h4>
<div class="preview">
  <pre><code>GET http://api.lelylan.com/types/:id</code></pre>
</div>

<h4>Parameters</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>id</span>
        <span class="info">required</span>
      </td>
      <td>
        The ID of the desired type.
      </td>
    </tr>
  </tbody>
</table>

<h4>Example Request</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#get-a-type-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#get-a-type-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#get-a-type-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#get-a-type-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="get-a-type-curl">
    <div class="preview">
        <pre><xmp>curl http://api.lelylan.com/types/<id></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="get-a-type-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')();
Lelylan.Type.find('<id>', callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="get-a-type-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, Type) {
      $scope.type = Type.get({ id: '<id>' });
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="get-a-type-ruby">
    <div class="preview">
        <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new
type = lelylan.type('<id>')</xmp></pre>
    </div>
  </div>
</div>

<h4>Example header response</h4>

  <div class="preview"><pre><code>HTTP/1.1 200 OK</code></pre></div>

<h4 id="type-representation">Example body response</h4>

<div class="preview highlight"><pre><code>{
  "id": "5042234270eda61200000006",
  "uri": "http://api.lelylan.com/types/5042234270eda61200000006",
  "name": "Connected Light",
  "description": "Define a *basic* light structure",
  "categories": ["lights"],
  "owner": {
    "id": "5036227a4f1b030200000001",
    "uri": "http://api.lelylan.com/people/5036227a4f1b030200000001"
  },
  "created_at": "2012-09-01T15:01:22Z",
  "updated_at": "2012-09-01T15:01:22Z",
  "properties": [{
    "name": "Status",
    "id": "50420c3a267ff51300000001",
    "uri": "http://api.lelylan.com/properties/50420c3a267ff51300000001",
    "type": "text",
    "default": "0",
    "accepted": { "on": "On", "off": "Off" },
  }, {
    "name": "Intensity",
    "id": "518be8b100045e99cc000004",
    "uri": "http://api.lelylan.com/properties/518be8b100045e99cc000004",
    "type": "range",
    "range": { "min": "0", "max": "100", "step": "1" }
    "default": "50",
    "accepted": null,
  }],
  "functions": [{
    "name": "Turn on",
    "id": "5042205c70eda61000000003",
    "uri": "http://api.lelylan.com/functions/5042205c70eda61000000003",
    "properties": [{
      "id": "50420c3a267ff51300000001",
      "uri": "http://api.lelylan.com/properties/50420c3a267ff51300000001",
      "expected": "on",
      "pending": true
    }]
  }, {
    "name": "Turn off",
    "uri": "http://api.lelylan.com/functions/5042209370eda61000000004",
    "id": "5042209370eda61000000004",
    "properties": [{
      "id": "50420c3a267ff51300000001",
      "uri": "http://api.lelylan.com/properties/50420c3a267ff51300000001",
      "expected": "off",
      "pending": true
    }]
  }, {
    "name": "Set intensity",
    "uri": "http://api.lelylan.com/functions/504220c470eda60d00000005",
    "id": "504220c470eda60d00000005",
    "properties": [{
      "uri": "http://api.lelylan.com/properties/518be8b100045e99cc000004",
      "id": "518be8b100045e99cc000004",
      "expected": null,
      "pending": true
    }]
  }],
  "statuses": [{
    "name": "Light is On",
    "id": "518bea2500045e99cc000009",
    "uri": "http://api.lelylan.com/statuses/518bea2500045e99cc000009",
    "function": {
      "id": "5042209370eda61000000004",
      "uri": "http://api.lelylan.com/functions/5042209370eda61000000004"
    },
    "properties": [{
      "id": "50420c3a267ff51300000001",
      "uri": "http://api.lelylan.com/properties/50420c3a267ff51300000001",
      "pending": false,
      "values": ["on"]
    }],
  }, {
    "name": "Light is Off",
    "id": "518bea3100045e99cc00000b",
    "uri": "http://api.lelylan.com/statuses/518bea3100045e99cc00000b",
    "function": {
      "id": "5042205c70eda61000000003",
      "uri": "http://api.lelylan.com/functions/5042205c70eda61000000003"
    },
    "properties": [{
      "id": "50420c3a267ff51300000001",
      "uri": "http://api.lelylan.com/properties/50420c3a267ff51300000001",
      "pending": false,
      "values": ["off"]
    }],
  }]
}</code></pre></div>

<h4>Body Response explained</h4>

<dl>
  <dd><span>id</span> - Type ID.</dd>
  <dd><span>uri</span> - Type URI.</dd>
  <dd><span>name</span> - Type name.</dd>
  <dd><span>description</span> - Type description.</dd>
  <dd><span>categories</span> - Type categories.</dd>
  <dd><span>owner</span> - Type creator.</dd>
  <dd><span>properties</span> - See <a href="/api/types/properties#property-representation">property representation</a>.</dd>
  <dd><span>functions</span> - See <a href="/api/types/functions#function-representation">function representation</a>.</dd>
  <dd><span>statuses</span> - See <a href="/api/types/statuses#status-representation">status representation</a>.</dd>
</dl>

</article>

<br>

<article>

<h1 class="call"><a name="get-all-types">GET /types</a></h1>

<p>Returns a list of owned (and <a href="/api/core/#public-resources">public</a>) types.</p>

<h4>Resource URL</h4>
<div class="preview">
<pre><code># owned types
GET http://api.lelylan.com/types</code><code># all types
GET http://api.lelylan.com/types/public</code></pre>
</div>

<h4>Parameters</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>name</span>
        <span class="info">optional</span>
      </td>
      <td>
        Type name to search.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>start</span>
        <span class="info">optional</span>
      </td>
      <td>
        ID of the last fetched record. Learn more about <a href="/api/core/#pagination">pagination</a>.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>per</span>
        <span class="info">optional</span>
        <span class="info">default to '25'</span>
      </td>
      <td>
        Number of resources per page.
      </td>
    </tr>
  </tbody>
</table>

<h4>Example Request</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#get-all-types-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#get-all-types-node" data-toggle="tab" class="node"> Node.js</a></li>
  <li><a href="#get-all-types-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#get-all-types-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="get-all-types-curl">
    <div class="preview"><pre><xmp>curl http://api.lelylan.com/types \
     -H 'Authorization: Bearer <token>'</xmp></pre></div>
  </div>
  <div class="tab-pane" id="get-all-types-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')({ token: token });
Lelylan.Type.all({}, callback); // owned resources

var Lelylan = require('lelylan-node')();
Lelylan.Type.public({}, callback); // all existing resources</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="get-all-types-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">
    <div ng-repeat="type in owned">{{type}}</div>
    <div ng-repeat="type in public">{{type}}</div>
  </div>
  <script>
    function LelylanController($scope, Type) {
      $scope.owned  = Type.query();   // owned resources
      $scope.public = Type.public();  // all existing resources
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="get-all-types-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new(token: token)
types = lelylan.types # owned resources

lelylan = Lelylan::Client.new
types = lelylan.public_types # all existing resources</xmp></pre>
    </div>
  </div>
</div>

<h4>Example header response</h4>

<div class="preview"><pre><code>HTTP/1.1 200 OK</code></pre></div>

<h4>Example body response</h4>

<div class="preview"><pre><code>[
  {
    "uri": "http://api.lelylan.com/types/5042223470eda60d00000005",
    "id": "5042223470eda60d00000005",
    "name": "Light",
    "categories": ["lights"],
    "created_at": "2012-09-01T14:56:52Z",
    "updated_at": "2012-09-01T14:56:52Z"
  }, {
    "uri": "http://api.lelylan.com/types/5042229270eda61200000005",
    "id": "5042229270eda61200000005",
    "name": "Basic Light",
    "categories": ["lights"],
    "created_at": "2012-09-01T14:58:26Z",
    "updated_at": "2012-09-01T14:58:26Z"
  }, ...
]</code></pre></div>

<p class="notice">
<span class="label">notice</span>
Due to the type complexity structure the type representation is a simplified version of
its <a href="#type-representation">standard representation</a>. Most of the time having
the name and the category will be enough.
</p>

</article>

<br/>

<article>

<h1 class="call"><a name="create-a-type">POST /types</a></h1>

<p>
Create a type and returns extended information for it.
</p>

<h4>Resource URL</h4>
<div class="preview">
  <pre><code>POST http://api.lelylan.com/types</code></pre>
</div>

<h4>Parameters</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>name</span>
        <span class="info">required</span>
      </td>
      <td>
        Type name.
      </td>
    </tr>
  </tr>
  <tr>
    <td class="parameter">
      <span>description</span>
      <span class="info">optional</span>
    </td>
    <td>
      Type description.
    </td>
  </tr>
  <tr>
    <td class="parameter">
      <span>categories</span>
      <span class="info">optional</span>
    </td>
    <td>
      List of categories. <a href="/api/types#categories">See valid categories</a>.
    </td>
  </tr>
  <tr>
    <td class="parameter">
      <span>properties</span>
      <span class="info">optional</span>
    </td>
    <td>
      List of property IDs.
      <a href="/api/types/properties/">Learn more about properties</a>.
    </td>
  </tr>
  <tr>
    <td class="parameter">
      <span>functions</span>
      <span class="info">optional</span>
    </td>
    <td>
      List of function IDs.
      <a href="/api/types/functions/">Learn more about functions</a>.
    </td>
  </tr>
  <tr>
    <td class="parameter">
      <span>statuses</span>
      <span class="info">optional</span>
    </td>
    <td>
      List of status IDs.
      <a href="/api/types/statuses/">Learn more about statuses</a>.
    </td>
  </tr>
</tbody>
        </table>

<h4>Example Request</h4>

<p class="notice">
<span class="label">Notice</span>
In this example the resource IDs are identified from friendly names.
</p>

<ul class="nav nav-tabs">
  <li class="active"><a href="#create-a-type-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#create-a-type-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#create-a-type-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#create-a-type-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="create-a-type-curl">
    <div class="preview">
      <pre><xmp>curl -X POST http://api.lelylan.com/types \
     -H 'Authorization: Bearer <token>' \
     -H 'Content-Type: application/json' \
     -d '{
           "name": "Light",
           "categories": ["lights"],
           "properties": [ "<status>", "<intensity>" ],
           "functions": [ "<turn-on>", "<turn-off>", "<set-intensity>" ],
           "statuses": [ "<light-on>", "<light-off>" ]
         }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="create-a-type-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')({ token: token });
var params = {
  name: 'Light',
  categories: [ 'lights' ],
  properties: [ '<status>', '<intensity>' ],
  functions: [ '<turn-on>', '<turn-off>', '<set-intensity>' ],
  statuses: [ '<light-on>', '<light-off>' ] };

Lelylan.Type.create(params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="create-a-type-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, Type) {
      var params = {
        name: 'Light',
        categories: [ 'lights' ],
        properties: [ '<status>', '<intensity>' ],
        functions: [ '<turn-on>', '<turn-off>', '<set-intensity>' ],
        statuses: [ '<light-on>', '<light-off>' ] };

      $scope.type = new Type(params);
      $scope.type.$save();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="create-a-type-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new(token: token)
params = {
  name: 'Light',
  categories: [ 'lights' ],
  properties: [ '<status>', '<intensity>' ],
  functions: [ '<turn-on>', '<turn-off>', '<set-intensity>' ],
  statuses: [ '<light-on>', '<light-off>' ] };

type = lelylan.create_type(params)</xmp></pre>
    </div>
  </div>
</div>

<h4>Example header response</h4>

<div class="preview"><pre><code>HTTP/1.1 201 Created
Location: http://api.lelylan.com/types/5042234270eda61200000006</code></pre></div>

<h4>Example body response</h4>

<p>
  See <a href="#type-representation">type representation</a> for body response.
</p>

</article>

<br/>

<article>

<h1 class="call"><a name="update-a-type">PUT /types/:id</a></h1>

<p>
  Update a type identified from its ID and returns extended information for it.
</p>

<h4>Resource URL</h4>
<div class="preview">
<pre><code>PUT  http://api.lelylan.com/types/:id</code></pre>
</div>

<h4>Parameters</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>id</span>
        <span class="info">required</span>
      </td>
      <td>
        The ID of the desired type.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>name</span>
        <span class="info">optional</span>
      </td>
      <td>
        Type name.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>description</span>
        <span class="info">optional</span>
      </td>
      <td>
        Type description.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>categories</span>
        <span class="info">optional</span>
      </td>
      <td>
        List of categories. <a href="/api/types#categories">See valid categories</a>.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        List of property IDs.
        <a href="/api/types/properties/">Learn more about properties</a>.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>functions</span>
        <span class="info">optional</span>
      </td>
      <td>
        List of function IDs.
        <a href="/api/types/functions/">Learn more about functions</a>.
      </td>
    </tr>
    <tr>
      <td class="parameter">
        <span>statuses</span>
        <span class="info">optional</span>
      </td>
      <td>
        List of status IDs.
        <a href="/api/types/statuses/">Learn more about statuses</a>.
      </td>
    </tr>
  </tbody>
</table>

<h4>Example Request</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-a-type-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-a-type-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-a-type-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#update-a-type-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-a-type-curl">
    <div class="preview"><pre><xmp>curl -X PUT http://api.lelylan.com/types/<id> \
     -H 'Authorization: Bearer <token>' \
     -H 'Content-Type: application/json' \
     -d '{ "name": "RBG Light" }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-a-type-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')({ token: token });
var params = { name: 'RBG Light' };
Lelylan.Type.update('<id>', params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-a-type-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, Type) {
      var params = { id: '<id>', name: 'RBG Light' };
      $scope.type = new Type(params);
      $scope.type.$update();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-a-type-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new(token: token)
params = { name: 'RBG Light' }
type = lelylan.update_type('<id>', params)</xmp></pre>
    </div>
  </div>
</div>

<p class="notice">
<span class="label">Notice</span>
When updating a type connection (categories, properties, functions and statuses)
all previous connected resources are replaced.
</p>

<h4>Example header response</h4>

<div class="preview"><pre><code>HTTP/1.1 200 OK</code></pre></div>

<h4>Example body response</h4>

<p>
  See <a href="#type-representation">type representation</a> for body response.
</p>

</article>

<br/>

<article>

<h1 class="call"><a name="delete-a-type">DELETE /types/:id</a></h1>

<p>
  Delete a type identified from its ID and returns extended information for it.
  All connected resources (properties, functions and statuses) are not deleted.
</p>

<h4>Resource URL</h4>
<div class="preview">
<pre><code>DELETE http://api.lelylan.com/types/:id</code></pre>
</div>

<h4>Parameters</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>id</span>
        <span class="info">required</span>
      </td>
      <td>
        The ID of the desired type.
      </td>
    </tr>
  </tbody>
</table>

<h4>Example Request</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#delete-a-type-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#delete-a-type-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#delete-a-type-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#delete-a-type-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="delete-a-type-curl">
    <div class="preview"><pre><xmp>curl -X DELETE http://api.lelylan.com/types/<id> \
     -H 'Authorization: Bearer <token>'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="delete-a-type-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')({ token: token });
Lelylan.Type.delete('<id>', callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="delete-a-type-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, Type) {
      $scope.type= new Type({ id: '<id>' });
      $scope.type.$delete();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="delete-a-type-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new(token: token)
type = lelylan.delete_type('<id>')</xmp></pre>
    </div>
  </div>
</div>

<h4>Example header response</h4>

<div class="preview"><pre><code>HTTP/1.1 200 OK</code></pre></div>

<h4>Example body response</h4>

<p>
  See <a href="#type-representation">type representation</a> for body response.
</p>

</article>

<br/>

<article>

<h1 class="call"><a name="categories">GET /categories</a></h1>

<p>
  Returns a list of common categories to associate to your types.
</p>

<h4>Resource URL</h4>
<div class="preview">
<pre><code>GET http://api.lelylan.com/categories</code></pre>
</div>

<h4>Example Request</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#get-all-categories-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#get-all-categories-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#get-all-categories-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#get-all-categories-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="get-all-categories-curl">
    <div class="preview">
      <pre><xmp>curl http://api.lelylan.com/categories \
     -H 'Authorization: Bearer <token>'</xmp></pre>
     </div>
  </div>
  <div class="tab-pane" id="get-all-categories-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')();
Lelylan.Category.all({}, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="get-all-categories-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">
    <div ng-repeat="category in categories">{{category}}</div>
  </div>
  <script>
    function LelylanController($scope, Category) {
      $scope.categories = Category.query();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="get-all-categories-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new
categories = lelylan.categories</xmp></pre>
    </div>
  </div>
</div>

<h4>Example header response</h4>

<div class="preview"><pre><code>HTTP/1.1 200 OK</code></pre></div>

<h4>Example body response</h4>

<div class="preview"><pre><code>[
  { "name": "lights" },
  { "name": "locks" },
  { "name": "thermostats" },
  { "name": "alarms" },
  { "name": "meters" },
  { "name": "cameras" },
  ...
]</code></pre></div>

</article>
