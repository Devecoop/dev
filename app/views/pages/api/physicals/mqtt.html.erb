<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#creating-the-device">Creating the device</a></td></tr>
    <tr><td>&raquo; <a href="#connecting-to-lelylan-mqtt">Connecting to Lelylan MQTT</a></td></tr>
    <tr><td>&raquo; <a href="#receiving-device-updates">Receiving updates from Lelylan</a></td></tr>
    <tr><td>&raquo; <a href="#sending-device-updates">Sending updates to Lelylan</a></td></tr>
    <tr><td>&raquo; <a href="#setting-physical-uri">Setting physical URI</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="direct-access"><%= title %></a></h1>

<p>
  <a href="http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html">MQTT</a>
  is a publish/subscribe, extremely simple and lightweight messaging protocol, designed for
  constrained devices and low-bandwidth, high-latency or unreliable networks.
</p>

<p>
  The Lelylan MQTT Broker is a simple way to interact with Lelylan directly from any
  MQTT client. It provides full API interaction, as well as push notifications and
  subscriptions. It gives you a MQTT 3.1 compliant solution supporting QoS 0 and QoS
  1 levels on message delivering.
</p>

<p class="notice">
<span class="label">notice</span>
Lelylan MQTT is in early beta testing and unstable, so <a href="http://twitter.com/#!/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us about any problem.
</p>

</article>

<article>

<h2 class="call"><a name="creating-the-device">Creating the device</a></h2>

<p>
To create a new device open your <a href="http://manage.lelylan.com">Dashboard</a>.
Click the <a href="http://manage.lelylan.com/new">create device</a> link and fill the form
with the desired device name and type. For the moment leave empty the physical field
(we'll come back later on that).
<p>
<div class="overlay">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-create.png') %>
      <div class="ao-annotations">
        <span style="top: 5%; left: 28%; width: 140px;" class="from-right">Create link</span>
      </div>
    </div>
  </div>
</div>

<br/>

<p>
  When created, you'll see a detailed view of your device. Click on <code>settings</code> and
  you'll find all needed info to connect the physical device to Lelylan.
</p>

<ul>
  <li><strong>Type</strong> - Link to the type definition (to see the device properties)</li>
  <li><strong>ID</strong> - Unique device identifier.</li>
  <li><strong>Secret</strong> - Device secret code used to authenticate the communication with Lelylan.</li>
</ul>

<div class="overlay" style="margin-left: 190px;">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-component.png') %>
      <div class="ao-annotations">
        <span style="top: 7.5%; left: 78%; width: 140px;" class="from-right">Settings link</span>
        <span style="top: 67%; left: 97%; width: 140px;" class="from-right">Type link</span>
        <span style="top: 74%; left: -66%; width: 140px;">Device ID</span>
        <span style="top: 88%; left: 97%; width: 140px;" class="from-right">Device secret</span>
      </div>
    </div>
  </div>
</div>

<br/>

</article>

<article>

<h2 class="call"><a name="connecting-to-lelylan-mqtt">Connecting to Lelylan MQTT Broker</a></h2>

<p>
Lelylan MQTT accept connections from any MQTT client supporting the MQTT 3.1 specs. During
the connection phase the client needs to set the <code>device.id</code> as username and the
<code>device.secret</code> as password.
When the credentials are missing or not valid, the connection is rejected.
</p>

<h4>MQTT Connection Info</h4>

<div class="preview">
<pre><code><span style="color: #999">host:</span> 96.126.109.170
<span style="color: #999">port:</span> 1883</code></pre>
</div>

<h4>Example Subscription</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#connect-physical-device-arduino" data-toggle="tab" class="arduino">Adruino</a></li>
  <li><a href="#connect-physical-device-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#connect-physical-device-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#connect-physical-device-python" data-toggle="tab" class="python">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="connect-physical-device-arduino">
    <div class="preview">
      <pre class="prettyprint"><xmp>/* ------------------------------------------------
 * Install the following PubSubClient fork
 * https://github.com/andreareginato/pubsubclient
 * It sets the max packet size to 512 bytes
 * ------------------------------------------------ */

#include <SPI.h>
#include <Ethernet.h>
#include <PubSubClient.h>
#include <aJSON.h>

// Update these with values suitable for your network.
byte mac[] = { 0xA0, 0xA0, 0xBA, 0xAC, 0xAE, 0x12 };

/* ---------------
 * Lelylan config
 * --------------- */

// local lelylan mqtt server
byte server[] = { 192, 168, 1, 101 };

// device id (MQTT client username)
char* deviceId = "51dfdc22d033a99721000001";

// device secret (MQTT client password)
char* deviceSecret = "8eb6a0c2d0bf6140e9b72c2eb7c2222b3252c5e4d765f7f67da810ad8da8742f";

// mqtt client identifier (random unique value, max 23 bytes)
char* clientId = "mqtt-123456";

// out topic (where physical updates are published)
char* outTopic = "devices/51dfdc22d033a99721000001/set";

// in topic (where lelylan updates are received)
char* inTopic = "devices/51dfdc22d033a99721000001/get";

/* ----------------
 * MQTT connection
 * ---------------- */

// callback function for any subscribed channel
void callback(char* topic, byte* payload, unsigned int length);

// ethernet connection
EthernetClient ethClient;
PubSubClient client(server, 1883, callback, ethClient);

// arduino setup
void setup() {
  Serial.begin(9600);
  delay(500);

  Serial.println("Start Ethernet");
  Ethernet.begin(mac);

  // debug to show IP address
  Serial.print("IP address: ");
  Serial.println(Ethernet.localIP());

  // connect to the MQTT server
  connectToMQTT();
}

// arduino loop
void loop() {
  connectToMQTT();
}

// connect to the MQTT server
void connectToMQTT() {
  // add reconnection logics
  if (!client.connected()) {
    // connection to MQTT server
    if (client.connect(clientId, deviceId, deviceSecret)) {
      Serial.print("[OK] Connected with MQTT");
      // ...
    }
  }

  client.loop();
}</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="connect-physical-device-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>// ------------------------------
// Install first the mqtt client
// $ npm install mqtt
// ------------------------------

// device credentials
var device = { id: '<device-id>', secret: '<device-secret>' }

// device topics
var in_topic  = 'devices/' + device.id + '/get'   // receiving messages
  , out_topic = 'devices/' + device.id + '/set';  // publishing messages

// connection settings
var mqtt   = require('mqtt')
  , host   = '96.126.109.170'
  , port   = '1883'

// client settings
var settings = {
  username: device.id,     // device.id as client username
  password: device.secret  // device.secret as client password
}

// client connection
var client = mqtt.createClient(port, host, settings);
client.on('connect', function() {
  console.log('Client successfully connected');

  // subscription and publish code
  // ...
});</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="connect-physical-device-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp># ------------------------------
# Install first the mqtt client
# $ gem install mqtt
# ------------------------------

require 'mqtt'
require 'uri'
require 'json'

# device credentials
device = { id: '<device-id>', secret: '<device-secret>' }

# device topics
in_topic  = 'devices/' + device[:id] + '/get' # receiving messages
out_topic = 'devices/' + device[:id] + '/set' # published messages

# connection parameters
conn_opts = {
  remote_host: '96.126.109.170',
  remote_port: '1883',
  username: device[:id],
  password: device[:secret]
}

# client connection
MQTT::Client.connect(conn_opts) do |client|
  puts "Client successfully connected"

  # subscription an publish code
  # ...
end</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="connect-physical-device-python">
    <div class="preview">
      <pre class="prettyprint"><xmp># --------------------------
# Install first mosquitto
# $ pip install mosquitto
# --------------------------

import mosquitto, json

# event callbacks
def on_connect(mosq, obj, rc):
    print("rc: " + str(rc))

def on_message(mosq, obj, msg):
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))

def on_publish(mosq, obj, mid):
    print("mid: " + str(mid))

def on_subscribe(mosq, obj, mid, granted_qos):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

# create client
client = mosquitto.Mosquitto()

# assign event callbacks
client.on_message = on_message
client.on_connect = on_connect
client.on_publish = on_publish
client.on_subscribe = on_subscribe

# device credentials
device_id     = '<device-id>'
device_secret = '<device-secret>'

# device topics
in_topic  = 'devices/' + device_id + '/get'  # receiving messages
out_topic = 'devices/' + device_id + '/set'  # publishing messages

# client connection
client.username_pw_set(device_id, device_secret)
client.connect('96.126.109.170', '1883')

# subscription and publish code
# ...

# Continue the network loop, exit when an error occurs
rc = 0
while rc == 0:
    rc = client.loop()
print("rc: " + str(rc))
</xmp></pre>
    </div>
  </div>
</div>

</article>

<br/>

<article>

<h2 class="call"><a name="receiving-device-updates">Receiving updates from Lelylan</a></h2>

<p>
When a user <a href="/api/devices#update-properties">updates a device property</a> or
<a href="/api/devices#execute-a-function">executes a function</a> using Lelylan, a message is
published to the topic <code>devices/:id/get</code>. Subscribe this topic to get
all device updates.
</p>

<h4>Topic Example</h4>

<div class="preview">
<pre><xmp>devices/<device-id>/get</xmp></pre>
</div>

<h4>Received JSON Payload</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to change in the physical world.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Desired property value.
      </td>
    </tr>
  </tbody>
</table>

<h4>Subscription Example</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#subscribe-arduino" data-toggle="tab" class="arduino">Arduino</a></li>
  <li><a href="#subscribe-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#subscribe-ruby" data-toggle="tab" class="node">Ruby</a></li>
  <li><a href="#subscribe-python" data-toggle="tab" class="node">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="subscribe-arduino">
    <div class="preview">
      <pre class="prettyprint"><xmp>void connectToMQTT() {
  if (!client.connected()) {
    if (client.connect(client_id, device_id, device_secret)) {
      Serial.print("[OK] Connected with MQTT");
      // subscribe to the desired topic when the connection is established
      subscribeToTopic();
    }
  }
  client.loop();
}

// subscribe to lelylan updates
void subscribeToTopic() {
  client.subscribe(inTopic);
}

// subscription callback (called when a message is sent to the subscribed topic)
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Receiving subscribed message");
  Serial.println(topic);
  Serial.write(payload, length);
}</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="subscribe-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>client.on('connect', function() {
  console.log('Client successfully connected');

  // client subscription
  client.subscribe(in_topic)
  client.on('message', function(topic, message) {
    console.log('received', topic, message);
  });</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="subscribe-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>MQTT::Client.connect(conn_opts) do |client|
  Thread.new do
    // client subscription
    client.get(in_topic) do |topic, message|
      puts "Received #{topic}: #{message}"
    end
  end
end</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="subscribe-python">
    <div class="preview">
      <pre class="prettyprint"><xmp># Start subscribe, with QoS level 0
client.subscribe(in_topic, 0)</xmp></pre>
    </div>
  </div>
</div>

</article>

<br/>

<article>

<h2 class="call"><a name="sending-device-updates">Sending updates to Lelylan</a></h2>

<p>
When a physical device changes its status through a physical interaction a message needs
to be published to the device topic <code>devices/:id/set</code> with the list of the updated
properties.
</p>

<h4>Topic Example</h4>

<div class="preview">
<pre><xmp>devices/<device-id>/set</xmp></pre>
</div>

<h4>JSON Payload</h4>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to change in the physical world.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Updated property value.
      </td>
    </tr>
  </tbody>
</table>

<h4>Publish Example</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#publish-arduino" data-toggle="tab" class="arduino">Adruino</a></li>
  <li><a href="#publish-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#publish-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#publish-python" data-toggle="tab" class="python">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="publish-arduino">
    <div class="preview">
      <pre class="prettyprint"><xmp>// publish to lelylan
void publishToTopic() {
  // to create proper json use https://github.com/interactive-matter/aJson
  char* payload  = "{\"properties\":[{ \"id\": \"<property-id>\", \"value\": \"on\" }]}";
  client.publish(outTopic, payload);
}</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="publish-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>// publish to lelylan
var payload = { properties: [{ id: '<property-id>', value: '<value>' }] };
client.publish(out_topic, JSON.stringify(payload));</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="publish-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>MQTT::Client.connect(conn_opts) do |client|
  # publish to Lelylan
  payload = { properties: [{ id: '518be5a700045e1521000001', value: 'on' }] };
  client.publish(out_topic, payload.to_json)
  puts "Published #{out_topic}: #{payload}"
  loop { sleep 0.1 } # keep listening
end</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="publish-python">
    <div class="preview">
      <pre class="prettyprint"><xmp># publish to Lelylan
payload = { 'properties': [{ 'id': '518be5a700045e1521000001', 'value': 'on' }] };
client.publish(out_topic, json.dumps(payload))</xmp></pre>
    </div>
  </div>
</div>

</article>

<br/>

<article>

<h2 class="call"><a name="setting-physical-uri">Setting physical URI</a></h2>

<p>
One more step. To connect Lelylan to the physical device fill the <code>physical</code>
field with the MQTT URI <code>http://nodes.lelylan.com/mqtt/devices/&lt;device-id&gt;</code>
(where <code>device-id</code> is the device id you are working at).
</p>

<h4>Structure Example</h4>

<div class="preview">
<pre><code><span style="color: #999">physical uri</span> http://nodes.lelylan.com/mqtt/devices/518be5a700045e1521000001
<span style="color: #999">device id:</span>   518be5a700045e1521000001</pre></code>
</div>

<h4>Fill the physical field</h4>

<div class="overlay">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-component-update-mqtt.png') %>
      <div class="ao-annotations">
        <span style="top: 12.5%; left: 78%; width: 140px;" class="from-right">Settings link</span>
        <span style="top: 69.5%; left: 99%; width: 140px;" class="from-right">Physical URI Field</span>
      </div>
    </div>
  </div>
</div>

<p>
You are done. You can now control your device through the <a href="http://manage.lelylan.com">Dashboard</a>.
Give us your <a href="http://twitter.com/lelylan">feedback</a> and for any problem during the physical device
integration do not hesitate to <a href="http://twitter.com/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us.
</p>

</article>

<br/>
<br/>
<br/>

<article>

<h1 class="call"><a>What's next?</a></h1>

<nav class="nav-intro">
<ul>
  </li>
  <li>
  <a href="http://twitter.com/lelylan" title="">
    <span  class="icon"><i aria-hidden="true" class="icon-blog"></i></span>
    <span>Tell us your story<span class="small"> | Share your experiences using lelylan</span></span>
  </a>
  </li>
  <li>
  <a href="/api" title="">
    <span  class="icon"><i aria-hidden="true" class="icon-blog"></i></span>
    <span class="highlight">Lelylan API<span class="small"> | Find out more about Lelylan</span></span>
  </a>
  </li>
</ul>

</nav>

<div class="clearfix">

</article>
