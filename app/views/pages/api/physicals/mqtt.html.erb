<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#creating-the-device">Creating the device</a></td></tr>
    <tr><td>&raquo; <a href="#setting-physical-uri">Setting the physical URI</a></td></tr>
    <tr><td>&raquo; <a href="#connecting-to-lelylan">Connecting to Lelylan</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="direct-access"><%= title %></a></h1>

<p>
  <a href="http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html">MQTT</a>
  is a publish/subscribe, extremely simple and lightweight messaging protocol, designed for
  constrained devices and low-bandwidth, high-latency or unreliable networks.
</p>

<p>
  The Lelylan MQTT Broker is a simple way to interact with Lelylan directly from any
  MQTT client. It provides full API interaction, as well as push notifications and
  subscriptions. It gives you a MQTT 3.1 compliant solution supporting QoS 0 and QoS
  1 levels on message delivering.
</p>

<p class="notice">
<span class="label">notice</span>
Lelylan MQTT is in early beta testing and it's unstable, so <a href="http://twitter.com/#!/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us about any problem.
</p>

</article>

<article>

<h2 class="call"><a name="creating-the-device">Creating the device</a></h2>

<p>
To create a new device open your <a href="http://manage.lelylan.com">Dashboard</a>.
Click the <a href="http://manage.lelylan.com/new">create device</a> link and fill the form
with the desired device name and type. For the moment leave empty the physical field
(we'll come back later on that).
<p>
<div class="overlay">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-create.png') %>
      <div class="ao-annotations">
        <span style="top: 5%; left: 28%; width: 140px;" class="from-right">Create link</span>
      </div>
    </div>
  </div>
</div>

<br/>

<p>
  When created, you'll see a detailed view of your new device. Click on <code>settings</code>
  and you'll find all needed info to connect the physical device to Lelylan.
</p>

<ul>
  <li><strong>Type</strong> - Link to the type definition (to see the device properties)</li>
  <li><strong>ID</strong> - Unique device identifier.</li>
  <li><strong>Secret</strong> - Device secret code used to authenticate the communication with Lelylan.</li>
</ul>

<div class="overlay" style="margin-left: 190px;">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-component.png') %>
      <div class="ao-annotations">
        <span style="top: 7.5%; left: 78%; width: 140px;" class="from-right">Settings link</span>
        <span style="top: 67%; left: 97%; width: 140px;" class="from-right">Type link</span>
        <span style="top: 74%; left: -66%; width: 140px;">Device ID</span>
        <span style="top: 88%; left: 97%; width: 140px;" class="from-right">Device secret</span>
      </div>
    </div>
  </div>
</div>

</article>

<br/>

<article>

<h2 class="call"><a name="setting-physical-uri">Setting the physical URI</a></h2>

<p>
To communicate with the physical device you need to connect Lelylan with the MQTT client.
To make this possible fill the <code>physical</code> field with the URI
<code>http://nodes.lelylan.com/mqtt/devices/&lt;device-id&gt;</code>.
In this way all updates coming from Lelylan will be forwarded to the authorized MQTT client.
</p>

<h4>Structure Example</h4>

<div class="preview">
<pre><code><span style="color: #999">physical uri</span> http://nodes.lelylan.com/mqtt/devices/518be5a700045e1521000001
<span style="color: #999">device id:</span>   518be5a700045e1521000001</pre></code>
</div>

<h4>Fill the physical field</h4>

<div class="overlay">
  <div class="ao-item">
    <div class="ao-preview">
      <%= image_tag('device-component-update-mqtt.png') %>
      <div class="ao-annotations">
        <span style="top: 12.5%; left: 78%; width: 140px;" class="from-right">Settings link</span>
        <span style="top: 69.5%; left: 99%; width: 140px;" class="from-right">Physical URI Field</span>
      </div>
    </div>
  </div>
</div>

</article>

<br/>

<article>

<h2 class="call"><a name="connecting-to-lelylan">Connecting to Lelylan</a></h2>

<p>
Lelylan MQTT accept connections from any MQTT client supporting the MQTT 3.1 specs. During
the connection phase the client needs to set the <code>device.id</code> as username and the
<code>device.secret</code> as password.
When the credentials are missing or not valid, the connection is rejected.
</p>

<h4>MQTT Broker parmas</h4>

<div class="preview">
<pre><code><span style="color: #999">host:</span> 96.126.109.170
<span style="color: #999">port:</span> 1883</code></pre>
</div>

<h4>How to receive data</h4>

<p>
When a user updates a device property or executes a function using Lelylan, a message is
published to the topic <code>devices/:id/get</code>. The physical device must subscribe
this topic in order to apply the required changes.
</p>

<h4>How to send data</h4>

<p>
When a physical device updates its status through a physical interaction Lelylan needs to be
notified publishing a message to the topic <code>devices/:id/set</code> with the list of all
updated properties.
</p>

<h4>JSON Payload</h4>

<p>
Every message (received or published) is made up from a list of properties.
</p>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to change in the physical world.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Desired property value.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.expected</span>
        <span class="info">optional</span>
      </td>
      <td>
        Expected property value.
        <a href="/community/faq#value-expected-pending">Learn more about</a>.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.pending</span>
        <span class="info">optional</span>
      </td>
      <td>
        Property pending status.
        <a href="/community/faq#value-expected-pending">Learn more about</a>
        <span class="info">Valid values: true, false.</span>
      </td>
    </tr>
  </tbody>
</table>

<h4>MQTT Client Example</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#connect-physical-device-arduino" data-toggle="tab" class="arduino">Adruino</a></li>
  <li><a href="#connect-physical-device-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#connect-physical-device-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#connect-physical-device-python" data-toggle="tab" class="python">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="connect-physical-device-arduino">
    <div class="preview">
      <pre class="prettyprint"><xmp>/* ------------------------------------------------
 * Install the following PubSubClient fork
 * https://github.com/andreareginato/pubsubclient
 * It sets the max packet size to 512 bytes
 * ------------------------------------------------ */

#include <SPI.h>
#include <Ethernet.h>
#include <PubSubClient.h>
#include <aJSON.h>

// Update these with values suitable for your network.
byte mac[] = { 0xA0, 0xA0, 0xBA, 0xAC, 0xAE, 0x12 };

/* ---------------
 * Lelylan config
 * --------------- */

// local lelylan mqtt server
byte server[] = { 192, 168, 1, 101 };

// set your device id (MQTT client username)
char* deviceId = "<device-id>";

// set your device secret (MQTT client password)
char* deviceSecret = "<device-secret>";

// mqtt client identifier (random unique value, max 23 bytes)
char* clientId = "<client-id>";

// out topic (where physical updates are published)
char* outTopic = "devices/<device-id>/set";

// in topic (where lelylan updates are received)
char* inTopic = "devices/<device-id>/get";

/* ----------------
 * MQTT connection
 * ---------------- */

// callback function for any subscribed channel
void callback(char* topic, byte* payload, unsigned int length);

// ethernet connection
EthernetClient ethClient;
PubSubClient client(server, 1883, callback, ethClient);

// arduino setup
void setup() {
  Serial.begin(9600);
  delay(500);

  Serial.println("Start Ethernet");
  Ethernet.begin(mac);

  // debug to show IP address
  Serial.print("IP address: ");
  Serial.println(Ethernet.localIP());

  // connect to the MQTT server
  connectToMQTT();
}

// arduino loop
void loop() {
  connectToMQTT();
}

// connect to the MQTT server and subscribe to the desired topic
void connectToMQTT() {
  // add reconnection logics
  if (!client.connected()) {
    // connection to MQTT server
    if (client.connect(clientId, deviceId, deviceSecret)) {
      Serial.print("[OK] Connected with MQTT");
      subscribeToTopic();
      publishToTopic();
    }
  }

  client.loop();
}

/* --------------
 * MQTT publish
 * -------------- */

void publishToTopic() {
  // publish a predefined JSON that set the property to the desired value
  // to create proper json use https://github.com/interactive-matter/aJson
  char* payload = "{\"properties\":[{ \"id\": \"<property-id>\", \"value\": \"<value>\" }]}";
  client.publish(outTopic, payload);
}

/* ---------------
 * MQTT subscribe
 * --------------- */

// subscribe for incoming messages
void subscribeToTopic() {
  client.subscribe(inTopic);
}

// subscription callback
void callback(char* topic, byte* payload, unsigned int length) {
  // debug to show the received message
  Serial.print("Receiving subscribed message");
  Serial.println(topic);
  Serial.write(payload, length);
}</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="connect-physical-device-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>// ------------------------------
// Install first the mqtt client
// $ npm install mqtt
// ------------------------------

// device credentials
var device = { id: '<device-id>', secret: '<device-secret>' }

// device topics
var in_topic  = 'devices/' + device.id + '/get'   // receiving messages
  , out_topic = 'devices/' + device.id + '/set';  // publishing messages

// connection settings
var mqtt = require('mqtt')
  , host = '96.126.109.170'
  , port = '1883'

// client settings
var settings = {
  username: device.id,     // device.id as client username
  password: device.secret  // device.secret as client password
}

// client connection
var client = mqtt.createClient(port, host, settings);
client.on('connect', function() {
  console.log('Client successfully connected');

  // subscribe for incoming messages
  client.subscribe(in_topic);
  client.on('message', function(topic, message) {
    console.log('received', topic, message);
  });

  // publish a message
  var payload = { properties: [{ id: '<property-id>', value: '<value>' }] };
  client.publish(out_topic, JSON.stringify(payload));
});</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="connect-physical-device-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp># ------------------------------
# Install first the mqtt client
# $ gem install mqtt
# ------------------------------

require 'mqtt'
require 'uri'
require 'json'

# device credentials
device = { id: '<device-id>', secret: '<device-secret>' }

# device topics
in_topic  = 'devices/' + device[:id] + '/get' # receiving messages
out_topic = 'devices/' + device[:id] + '/set' # published messages

# connection parameters
settings = {
  remote_host: '96.126.109.170',
  remote_port: '1883',
  username: device[:id],
  password: device[:secret]
}

# client connection
MQTT::Client.connect(settings) do |client|
  Thread.new do
    # subscribe for incoming messages
    client.get(in_topic) do |topic, message|
      puts "Received #{topic}: #{message}"
    end
  end

  # publish a message
  payload = { properties: [{ id: '<property-id>', value: '<value>' }] };
  client.publish(out_topic, payload.to_json)
  puts "Published #{out_topic}: #{payload}"
  loop { sleep 0.1 } # keep listening
end</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="connect-physical-device-python">
    <div class="preview">
      <pre class="prettyprint"><xmp># --------------------------
# Install first mosquitto
# $ pip install mosquitto
# --------------------------

import mosquitto, json

# event callbacks
def on_connect(mosq, obj, rc):
    print("rc: " + str(rc))

def on_message(mosq, obj, msg):
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))

def on_publish(mosq, obj, mid):
    print("mid: " + str(mid))

def on_subscribe(mosq, obj, mid, granted_qos):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))

# create client
client = mosquitto.Mosquitto()

# assign event callbacks
client.on_message = on_message
client.on_connect = on_connect
client.on_publish = on_publish
client.on_subscribe = on_subscribe

# device credentials
device_id     = '<device-id>'
device_secret = '<device-secret>'

# device topics
in_topic  = 'devices/' + device_id + '/get'  # receiving messages
out_topic = 'devices/' + device_id + '/set'  # publishing messages

# client connection
client.username_pw_set(device_id, device_secret)
client.connect('96.126.109.170', '1883')

# subscribe (with QoS level 0)
client.subscribe(in_topic, 0)

# publish a message
payload = { 'properties': [{ 'id': '<property-id>', 'value': '<value>' }] };
client.publish(out_topic, json.dumps(payload))

# Continue the network loop, exit when an error occurs
rc = 0
while rc == 0:
    rc = client.loop()
print("rc: " + str(rc))</xmp></pre>
    </div>
  </div>
</div>

<h4>A note to the physical communication flow</h4>

<p>
When communicating with the physical world, Lelylan expects a feedback to its requests.
For example when we ask to Arduino to turn on a light, Arduino must tell Lelylan that
the light was turned on. In the meantime the device is in a
<a href="/community/faq#value-expected-pending">pending</a>
status and the spinner is visible.
</p>

<p>
To close the pending status and tell Lelylan that the required changes were applied, the
physical device should publish a message to the out topic <code>/devices/:id/set</code>
with the new property values.
</p>

<pre class="prettyprint"><xmp>// node.js example confirming the light is on
var payload = { properties: [{ id: '518be5a700045e1521000001', value: 'on' }] };
client.publish(out_topic, JSON.stringify(payload));
</xmp></pre>

<h4>Conclusions</h4>

<p>
You are done. You can now control your device through the <a href="http://manage.lelylan.com">Dashboard</a>.
Give us your <a href="http://twitter.com/lelylan">feedback</a> and for any problem during the physical device
integration do not hesitate to <a href="http://twitter.com/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us.
</p>

</article>

<br/>
<br/>
<br/>

<article>

<h1 class="call"><a>What's next?</a></h1>

<nav class="nav-intro">
<ul>
  </li>
  <li>
  <a href="http://twitter.com/lelylan" title="">
    <span  class="icon"><i aria-hidden="true" class="icon-blog"></i></span>
    <span>Tell us your story<span class="small"> | Share your experiences using lelylan</span></span>
  </a>
  </li>
  <li>
  <a href="/api" title="">
    <span  class="icon"><i aria-hidden="true" class="icon-blog"></i></span>
    <span class="highlight">Lelylan API<span class="small"> | Find out more about Lelylan</span></span>
  </a>
  </li>
</ul>

</nav>

<div class="clearfix">

</article>
