<h2 id="connect-your-first-light-introduction">Introduction</h2>

<%= image_tag('connect-your-first-light/electric-imp/overview.jpg', class: 'img-thumbnail') %>

<p>
  This tutorial will show you how to control and monitor a simple light by connecting an
  Electric Imp to Lelylan using HTTP requests.
</p>

<h2 id="connect-your-first-light-components">Components</h2>

<p>
  To connect your first light you need an Electric Imp and an <a href="https://electricimp.com/docs/gettingstarted/devkits/">April Board</a>.
  Follows a list with the needed components to reach the final
  result.
<p>

<table class="table table-stripped table-hover">
  <thead>
    <tr>
      <th>Components</th>
      <th>Buy</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://electricimp.com/product/">Electric Imp</a></td>
      <td><a href="http://smartmaker.com/index.php/electric-imp/electric-imp-imp001.html">Smart Maker</a></td>
      <td>$18.25</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="http://smartmaker.com/index.php/electric-imp/electric-imp-breakout-boards/break-shield-impee-for-electric-imp.html">Breakout Board</a></td>
      <td><a href="http://smartmaker.com/index.php/electric-imp/electric-imp-breakout-boards/break-shield-impee-for-electric-imp.html">Smart Maker</a></td>
      <td>$5.70</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/97">Push button </a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/9590">Any led</a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-hardware-setup">Hardware Setup</h2>

<p>
This example demonstrates the use of a pushbutton as a switch. Each time you press
the button, the LED is turned on (if it's off) or off (if on).
</p>

<%= image_tag('connect-your-first-light/electric-imp/components.png', class: 'img-thumbnail') %>

<h2 id="connect-your-first-light-lelylan-setup">Electric Imp Setup</h2>
<p>
  In order to connect Electric Imp to the internet you should first follow the official <a href="https://electricimp.com/docs/gettingstarted/1-blinkup/">Getting started guide</a>. You should also need to understand the Electric Imp's concepts behind <a href="https://electricimp.com/docs/gettingstarted/2-helloworld/">Agent</a> and <a href="https://electricimp.com/docs/gettingstarted/3-agents/">Device</a> entities. 
</p>

<h2 id="connect-your-first-light-lelylan-setup">Lelylan Setup</h2>

<p>
To create a new device open the <a href="http://manage.lelylan.com">Dashboard</a>.
Click the <a href="http://manage.lelylan.com/new">create device</a> link and fill the
form with the desired device name and choosing <code>Basic Light</code> as type.
<p>

<a href="http://manage.lelylan.com/new">
  <%= image_tag('connect-your-first-light/create-device.png', class: 'img-thumbnail') %>
</a>

<p>
When created, you'll see a detailed view of your new device. Click on <code>settings</code>
and you'll find all needed info to connect your hardware to Lelylan.
</p>

<ul>
  <li><code>Type</code> - Link to the type definition (to see the device properties).</li>
  <li><code>ID</code> - Unique device identifier.</li>
  <li><code>Secret</code> - Device secret code used to authenticate the communication with Lelylan.</li>
</ul>

<h3>Connect Lelylan to the Physical World</h3>

<p>
To communicate with the physical device you need to connect Lelylan with the Electric Imp agent. Every agent has
a unique url that gives you a public IP usefull to communicate with lelylan.

After you have setup your Imp, your agent url can be found in your <a href="https://ide.electricimp.com/ide/">Electric Imp Ide</a>

  <a href="https://ide.electricimp.com/ide/">
    <%= image_tag('connect-your-first-light/electric-imp/imp-agent.png', class: 'img-thumbnail') %>
  </a>
</p>

<p>
Once you copied your url you must set it in your <a href="http://manage.lelylan.com/all">Lelylan Dashboard</a>.
Find the device you previously created, click on Settings, and under the <code> Phisycal Url</code> field paste the agent url,
that should be something like:
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td>Your Physical URI</td>
      <td><code><span class="glyphicon glyphicon-arrow-right"></span> https://agent.electricimp.com/vWAon1xxxxxx</code></td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-code">Electric Imp Code</h2>

<p>
Here is the Electric Imp Agent and Device sketches. To make it work set the <code>deviceId</code>
and the <code>deviceSecret</code> to your device credentials and the click the "Build and Run" button. For further
instructions see the <a href="#connect-your-first-light-code-explained">Code Explained</a> section.
</p>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  In order to make this sketch work you need to set the deviceId, deviceSecret.
  To get all the needed information access the device settings section.
  </p>
</div>

<script src="https://gist.github.com/giulyquinto/1799a4f5e98ab810e5a3.js"></script>

<h2 id="connect-your-first-light-control">Control your light</h2>

<p>
  Now that all the components are ready and your Electric Imp is connected to Lelylan
  access the <a href="http://manage.lelylan.com">Lelylan Dashboard</a>. From here you can control your light
  and get realtime notifications.
</p>

<a href="http://manage.lelylan.com">
<%= image_tag('connect-your-first-light/dashboard.png', class: 'img-thumbnail') %>
</a>

<h2 id="connect-your-first-light-code-explained">Code Explained</h2>

<p>
To better understand how the Agent and Device sketches work we'll give you a brief
description of what the most important code sections do.
</p>

<h2>Agent Code</h2>
<h3>Device Credentials</h3>

<p>
  The <code>deviceId</code> and <code>deviceSecret</code> are used to let the electric Imp
  understand which one is the communicating device on Lelylan. To get the device
  credentials open the <a href="http://manage.lelylan.com">Dashboard</a>, select the
  desired device, click on settings and copy the Device ID and the Device Secret.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// device credentials
const deviceId = "<DEVICE-ID>";
const deviceSecret = "<DEVICE-SECRET>";</xmp></pre>
</div>

<h3> Lelylan Direct Access: Setting Data</h3>
<p> 
  When you want to update the device on Lelylan Dashboard through HTTP you should use the
  <a href="http://dev.lelylan.com/makers#direct">Direct Access</a> method. The <code>request</code> function
  does this for you. It accepts the <code> lelylan_url</code> of your device and a <code>body</code> object (Squirrel <a href="http://www.squirrel-lang.org/doc/squirrel3.html#d0e514">Table</a>) that rapresents the payload (builded in the Device code). If the Agent's request is succesfully it will send a "success" event to device, else an "error" event.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// send the request to lelyan dashboard
function request(lelylan_url, body) {
  local data = http.jsonencode(body);
  local headers = {
    "Content-Type": "application/json",
    "X-Physical-Secret": deviceSecret 
  };
   // send data to your web service
  local req = http.put(lelylan_url, headers, data);
  local res = req.sendsync();
  
  if(res.statuscode < 200 || res.statuscode > 299) {
    device.send("error", res.body);
  } else device.send("success", res.body);
}</xmp></pre>
</div>

<p>
The <code> lelylanSet</code> function it's a shortcut for the <code> request </code> function
which sets the url.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// send "body" to update the light status on lelylan dashboard
function lelylanSet(body) {
  local lelylan_url = "http://api.lelylan.com/devices/" + deviceId + "/properties";
  request(lelylan_url, body);
}</xmp></pre>
</div>

<p>
  The Agent should be notified by the Device when it should send an update to Lelylan.
  When the Device wants to communicate with Lelylan it sends an event called "data" so the Agent should be ready to handle this
  event. In order to achive that we set on Agent: 
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// callback to update the device on lelylan dashboard
device.on("data", function(data) {
  lelylanSet(data);
});</xmp></pre>
</div>


<h3>Lelylan direct Access: Getting Data</h3>
<p>
  When Leylan send an update to the Agent it sends a PUT request with a JSON payload and some headers as described in the <a href="http://dev.lelylan.com/makers#direct-how-to-receive-data">Makers Api</a>. The <code> lelylanUpdate</code>
  function check if the <code> X-Physical-Secret</code> header is the same as <code>deviceSecret</code> (for security reason), if they match it sends
  an "update" event to the Device with the light status value associated in order to update the Electric Imp.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// send to the physical device the light status received from lelylan dashboard
function lelylanUpdate(request, response) {
  // json parsing 
  local data = http.jsondecode(request.body);
  
  server.log("[LELYLAN] Light status: " + data.properties[0].value);
  
  // security check to avoid not authorized requests
  if (request.headers["x-physical-secret"] == deviceSecret) {
    
    // the agent sends the "update" event to the device with light status
    device.send("update", data.properties[0].value);
    
    // confirm physical device update to lelylan dashboard
    data.properties[0].pending <- false; // tells lelylan that the update is completed
    lelylanSet(data);
  } else {
    server.log("[LELYLAN] Wrong secret! Check it out");
  }
}</xmp></pre>
</div>

<p>
  This time the Agent should be notified by Lelylan so we must declare a unique handler for HTTP requests that
  on requests will call the <code>lelylanUpdate</code> function.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// callback used to handle request from lelylan dashboard
http.onrequest(lelylanUpdate);</xmp></pre>
</div>


<h2> Device Code</h2>

<h3>JSON Payloads</h3>

<p>
  When communicating with Lelylan we use a fixed JSON structure. For this basic example we
  defined the JSON to turn the light on and the JSON to turn the light off.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>char* payloadOn  = "{\"properties\":[{\"id\":\"518be5a700045e1521000001\",\"value\":\"on\"}]}";
char* payloadOff = "{\"properties\":[{\"id\":\"518be5a700045e1521000001\",\"value\":\"off\"}]}";</xmp></pre>
</div>

<p>
  When receiving a message from Lelylan you get an array of properties, where each property is
  identified from its ID. For a <a href="http://types.lelylan.com/types/518be107ef539711af000001">Basic Light</a>
  the status id is 518be5a700045e1521000001. To get your device property IDs go into the device
  settings and click the <em>Type</em> link. It will send you to the type definition which is the
  base of your device structure and where you can see all the type properties.
</p>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  To deeply understand how Types works check out the <a href="/types">Types API</a>.
  </p>
</div>

<h3>Led and Button Pins</h3>

<p>
  Those are the pins used to connect the led and the button. If you have followed the
  <a href="#connect-your-first-light-hardware-setup">Fritzing diagram</a> you don't have to change
  anything. If you used different pins, remember to change those values.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>int inPin = 2; // button
int outPin = 4; // led</xmp></pre>
</div>

<h3>Led and Button Logics</h3>

<p>
  Here we define all needed variables to make the button correctly work. If you are new to
  pushbuttons check out the <a href="http://www.arduino.cc/en/Tutorial/Switch">Arduino tutorial</a>.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>int state = HIGH;     // current state of the output pin
int reading;          // current reading from the input pin
int previous = LOW;   // previous reading from the input pin
long time = 0;        // the last time the output pin was toggled
long debounce = 200;  // the debounce time, increase if the output flickers</xmp></pre>
</div>



<h3>Arduino Setup</h3>

<p>
  During the Arduino setup Arduino connects to Lelylan MQTT server and set the
  pin mode for the led and the button pins. Before, it connects to the Internet
  using DHCP.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void setup() {
  Serial.begin(9600);
  delay(500);

  Ethernet.begin(mac);
  Serial.print("Connected with IP: ");
  Serial.println(Ethernet.localIP());

  lelylanConnection();      // MQTT server connection
  pinMode(inPin, INPUT);    // button pin setup
  pinMode(outPin, OUTPUT);  // led pin setup
}</xmp></pre>
</div>

<h3>Arduino Loop</h3>

<p>
We use of a pushbutton as a switch: each time you press the button the led is
turned on or off. It also debounces the input, without which pressing the button
once would appear to the code as multiple presses. Once the led state changes,
Arduino publishes a message to Lelylan about the updates.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void loop() {
  lelylanConnection();
  char* value;
  reading = digitalRead(inPin);

  // if the input just went from LOW and HIGH and we've waited long enough to ignore
  // any noise on the circuit, toggle the output pin and remember the time
  if (reading == HIGH && previous == LOW && millis() - time > debounce) {
    if (state == LOW) {
      Serial.println("[PHYSICAL] Led turned on");
      lelylanPublish("on");
      state = HIGH;
    } else {
      Serial.println("[PHYSICAL] Led turned off");
      lelylanPublish("off");
      state = LOW;
    }
    time = millis();
  }

  // effectively update the light status
  digitalWrite(outPin, state);
  previous = reading;
}</xmp></pre>
</div>

<h3>MQTT connection</h3>

<p>
During the connection phase the client needs to set the <code>deviceId</code>
as username and the <code>deviceSecret</code> as password. When the credentials
are missing or not valid, the connection is rejected.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void lelylanConnection() {
  // add reconnection logics
  if (!client.connected()) {
    // connection to MQTT server
    if (client.connect(clientId, deviceId, deviceSecret)) {
      Serial.println("[PHYSICAL] Successfully connected with MQTT");
      lelylanSubscribe(); // topic subscription
    }
  }
  client.loop();
}</xmp></pre>
</div>

<p>
  To keep the connection alive after temporary loss of internet connection we
  check if the client is connected. When not, Arduino reconnects to Lelylan. This
  is why the <code>lelylanConnection</code> method is used in the loop function.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void loop() {
  // reconnection logics
  lelylanConnection();
  // ...</xmp></pre>
</div>

<h3>Publish Messages to Lelylan</h3>

<p>
  To notify the execution of a request or to notify a light status update
  Arduino needs to publish a message to the topic <code>devices/:id/set</code> with the list
  all of updated properties.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void lelylanPublish(char* value) {
  if (value == "on")
    client.publish(outTopic, payloadOn);  // light is on
  else
    client.publish(outTopic, payloadOff); // light is off
}</xmp></pre>
</div>

<p>
Every published message is made up from a list of properties.
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to send to Lelylan.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Desired property value.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.expected</span>
        <span class="info">optional</span>
      </td>
      <td>
        Expected property value.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.pending</span>
        <span class="info">optional</span>
      </td>
      <td>
        Property pending status.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
        <span class="info">Valid values: true, false.</span>
      </td>
    </tr>
  </tbody>
</table>


<h3>Receive Messages from Lelylan</h3>

<p>
When a user updates a device property or executes a function using Lelylan
(e.g from dashboard, mobile, etc.), a message is published to the topic
<code>devices/:id/get</code>. The physical device (that subscribed to this
channel during the connection phase) will receive all incoming messages through
the <code>callback</code> function (defined during the MQTT client initialization).
</p>

<p>
To correctly apply a command to our light we need to check the value for the status
property, turning it on or off. Once the led state is updated a confirmation message
needs to be published to Lelylan telling it that the new properties has been
successfully updated in the physical world.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>void callback(char* topic, byte* payload, unsigned int length) {
  // copu the payload content into a char*
  char* json;
  json = (char*) malloc(length + 1);
  memcpy(json, payload, length);
  json[length] = '\0';

  // update the physical status and confirm the executed update
  if (String(payloadOn) == String(json)) {
    Serial.println("[LELYLAN] Led turned on");
    lelylanPublish("on");
    state = HIGH;
  } else {
    Serial.println("[LELYLAN] Led turned off");
    lelylanPublish("off");
    state = LOW;
  }

  digitalWrite(outPin, state);
  free(json);
}</xmp></pre>
</div>

<p>
Every received message is made up from a list of properties each of them containing
the property ID and the property value to change.
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
      </td>
      <td>
        Array of properties to send to Lelylan.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
      </td>
      <td>
        New property value.
      </td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-problems">Possible Problems</h2>

<ul>
  <li>
  <em>Message Size</em> -
  Using Lelylan your messages are usually bigger than 128 bytes. For this reason we
  <a href="https://github.com/andreareginato/pubsubclient">forked</a> the
  original PubSubClient setting the <a href="http://knolleary.net/client-for-mqtt/api/#configoptions">max packet size</a>
  to 512 bytes.
  </li>
  <li>
  <em>Memory Usage</em> -
  Arduino doesn't have that much memory. Take care of it and free all variables you have used.
  If not, your Arduino will restart to get back the needed memory. A nice library to check
  the memory consumption out is <a href="http://playground.arduino.cc/Code/AvailableMemory">MemoryFree</a>.
  </li>

</ul>

<h2 id="connect-your-first-light-feedback"><span class="glyphicon glyphicon-comment"></span> Feedback</h2>

<%= render 'shared/feedback' %>
