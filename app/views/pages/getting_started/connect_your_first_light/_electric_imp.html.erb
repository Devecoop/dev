<h2 id="connect-your-first-light-introduction">Introduction</h2>

<%= image_tag('connect-your-first-light/electric-imp/overview.jpg', class: 'img-thumbnail') %>

<p>
  This tutorial will show you how to control and monitor a simple light by connecting an
  Electric Imp to Lelylan using HTTP requests.
</p>

<h2 id="connect-your-first-light-components">Components</h2>

<p>
  To connect your first light you need an Electric Imp and an <a href="https://electricimp.com/docs/gettingstarted/devkits/">April Board</a>.
  Follows a list with the needed components to reach the final
  result.
<p>

<table class="table table-stripped table-hover">
  <thead>
    <tr>
      <th>Components</th>
      <th>Buy</th>
      <th>Price</th>
      <th>Quantity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://electricimp.com/product/">Electric Imp</a></td>
      <td><a href="http://smartmaker.com/index.php/electric-imp/electric-imp-imp001.html">Smart Maker</a></td>
      <td>$18.25</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="http://smartmaker.com/index.php/electric-imp/electric-imp-breakout-boards/break-shield-impee-for-electric-imp.html">Breakout Board</a></td>
      <td><a href="http://smartmaker.com/index.php/electric-imp/electric-imp-breakout-boards/break-shield-impee-for-electric-imp.html">Smart Maker</a></td>
      <td>$5.70</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/97">Push button </a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
    <tr>
      <td><a href="https://www.sparkfun.com/products/9590">Any led</a></td>
      <td><a href="https://www.sparkfun.com/products/9590">Component packs</a></td>
      <td>$0.35</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-hardware-setup">Hardware Setup</h2>

<p>
This example demonstrates the use of a pushbutton as a switch. Each time you press
the button, the LED is turned on (if it's off) or off (if on).
</p>

<%= image_tag('connect-your-first-light/electric-imp/components.png', class: 'img-thumbnail') %>

<h2 id="connect-your-first-light-lelylan-setup">Electric Imp Setup</h2>
<p>
  In order to connect Electric Imp to the internet you should first follow the official <a href="https://electricimp.com/docs/gettingstarted/1-blinkup/">Getting started guide</a>. You should also need to understand the Electric Imp's concepts behind <a href="https://electricimp.com/docs/gettingstarted/2-helloworld/">Agent</a> and <a href="https://electricimp.com/docs/gettingstarted/3-agents/">Device</a> entities.
</p>

<h2 id="connect-your-first-light-lelylan-setup">Lelylan Setup</h2>

<p>
To create a new device open the <a href="http://manage.lelylan.com">Dashboard</a>.
Click the <a href="http://manage.lelylan.com/new">create device</a> link and fill the
form with the desired device name and choosing <code>Basic Light</code> as type.
<p>

<a href="http://manage.lelylan.com/new">
  <%= image_tag('connect-your-first-light/create-device.png', class: 'img-thumbnail') %>
</a>

<p>
When created, you'll see a detailed view of your new device. Click on <code>settings</code>
and you'll find all needed info to connect your hardware to Lelylan.
</p>

<ul>
  <li><code>Type</code> - Link to the type definition (to see the device properties).</li>
  <li><code>ID</code> - Unique device identifier.</li>
  <li><code>Secret</code> - Device secret code used to authenticate the communication with Lelylan.</li>
</ul>

<h3>Connect Lelylan to the Physical World</h3>

<p>
To communicate with the physical device you need to connect Lelylan with the Electric Imp agent. Every agent has
a unique url that gives you a public IP usefull to communicate with lelylan.

After you have setup your Imp, your agent url can be found in your <a href="https://ide.electricimp.com/ide/">Electric Imp Ide</a>

  <a href="https://ide.electricimp.com/ide/">
    <%= image_tag('connect-your-first-light/electric-imp/imp-agent.png', class: 'img-thumbnail') %>
  </a>
</p>

<p>
Once you copied your url you must set it in your <a href="http://manage.lelylan.com/all">Lelylan Dashboard</a>.
Find the device you previously created, click on Settings, and under the <code> Phisycal Url</code> field paste the agent url,
that should be something like:
</p>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td>Your Physical URI</td>
      <td><code><span class="glyphicon glyphicon-arrow-right"></span> https://agent.electricimp.com/vWAon1xxxxxx</code></td>
    </tr>
  </tbody>
</table>

<h2 id="connect-your-first-light-code">Electric Imp Code</h2>

<p>
Here is the Electric Imp Agent and Device sketches. To make it work set the <code>deviceId</code>
and the <code>deviceSecret</code> to your device credentials and the click the "Build and Run" button. For further
instructions see the <a href="#connect-your-first-light-code-explained">Code Explained</a> section.
</p>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  In order to make this sketch work you need to set the deviceId, deviceSecret.
  To get all the needed information access the device settings section.
  </p>
</div>

<script src="https://gist.github.com/giulyquinto/1799a4f5e98ab810e5a3.js"></script>

<h2 id="connect-your-first-light-control">Control your light</h2>

<p>
  Now that all the components are ready and your Electric Imp is connected to Lelylan
  access the <a href="http://manage.lelylan.com">Lelylan Dashboard</a>. From here you can control your light
  and get realtime notifications.
</p>

<a href="http://manage.lelylan.com">
<%= image_tag('connect-your-first-light/dashboard.png', class: 'img-thumbnail') %>
</a>

<h2 id="connect-your-first-light-code-explained">Code Explained</h2>

<p>
To better understand how the Agent and Device sketches work we'll give you a brief
description of what the most important code sections do.
</p>

<h2>Agent Code</h2>
<h3>Device Credentials</h3>

<p>
  The <code>deviceId</code> and <code>deviceSecret</code> are used to let the electric Imp
  understand which one is the communicating device on Lelylan. To get the device
  credentials open the <a href="http://manage.lelylan.com">Dashboard</a>, select the
  desired device, click on settings and copy the Device ID and the Device Secret.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// device credentials
const deviceId = "<DEVICE-ID>";
const deviceSecret = "<DEVICE-SECRET>";</xmp></pre>
</div>

<h3> Lelylan Direct Access: Setting Data</h3>

<p>
  When the Device wants to communicate any physical update to Lelylan it sends a "data" event to the Agent,
  which will call the <code>lelylanSet(data)</code> function to send the notification to Lelylan.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// callback to update the device on lelylan dashboard
device.on("data", function(data) {
  lelylanSet(data);
});</xmp></pre>
</div>

<p>
The <code> lelylanSet</code> prepares the Lelylan URL to call to update the properties.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// send "body" to update the light status on lelylan dashboard
function lelylanSet(body) {
  local lelylan_url = "http://api.lelylan.com/devices/" + deviceId + "/properties";
  request(lelylan_url, body);
}</xmp></pre>
</div>

<p>
  When you want to update the Lelylan Device with an HTTP request you have to use the
  <a href="http://dev.lelylan.com/makers#direct">Direct Access</a> flow. The <code>request</code>
  function prepares the payload with the properties that changed in the physical world and makes
  the request to Lelylan.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// send the request to lelyan dashboard
function request(lelylan_url, body) {
  local data = http.jsonencode(body);
  local headers = {
    "Content-Type": "application/json",
    "X-Physical-Secret": deviceSecret
  };
   // send data to your web service
  local req = http.put(lelylan_url, headers, data);
  local res = req.sendsync();

  if(res.statuscode < 200 || res.statuscode > 299) {
    device.send("error", res.body);
  } else device.send("success", res.body);
}</xmp></pre>
</div>

<h3>Lelylan Direct Access: Getting Data</h3>

<p>
  To receive the requests from Lelylan the Agent must declare a unique handler for
  incoming requests, so that the <code>lelylanUpdate</code> function can be called.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// callback used to handle request from lelylan dashboard
http.onrequest(lelylanUpdate);</xmp></pre>
</div>

<p>
  When, interacting with the Dashboard or the API, Lelylan sends a PUT request with a JSON payload
  with the properties you want to change in the physical world
  (as described in the <a href="http://dev.lelylan.com/makers#direct-how-to-receive-data">Makers Api</a>.
  The <code>lelylanUpdate</code> function checks if the <code>X-Physical-Secret</code> header is
  matches with the <code>deviceSecret</code> (for security reason) and sends an <code>update<code>
  event to the Device with the desired light status in order to update the physical world.
</p>

<p>
Once the led state is updated a confirmation message needs to be send to Lelylan to confirm that
the light status has been successfully updated in the physical world. That's why we reuse
<code>lelylanSet(data)</code> and we set the <code>pending</code> value to false.</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// send to the physical device the light status received from lelylan dashboard
function lelylanUpdate(request, response) {
  // json parsing
  local data = http.jsondecode(request.body);

  server.log("[LELYLAN] Light status: " + data.properties[0].value);

  // security check to avoid not authorized requests
  if (request.headers["x-physical-secret"] == deviceSecret) {

    // the agent sends the "update" event to the device with light status
    device.send("update", data.properties[0].value);

    // confirm physical device update to lelylan dashboard
    data.properties[0].pending <- false; // tells lelylan that the update is completed
    lelylanSet(data);
  } else {
    server.log("[LELYLAN] Wrong secret! Check it out");
  }
}</xmp></pre>
</div>

<p>
  When receiving a message from Lelylan you get an array of properties, where each property is
  identified from its ID. For a <a href="http://types.lelylan.com/types/518be107ef539711af000001">Basic Light</a>
  the status id is 518be5a700045e1521000001. To get your device property IDs go into the device
  settings and click the <em>Type</em> link. It will send you to the type definition which is the
  base of your device structure and where you can see all the type properties.
</p>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  To deeply understand how Types works check out the <a href="/types">Types API</a>.
  </p>
</div>


<h2> Device Code</h2>

<h3>Led and Button Pins</h3>

<p>
  Those are the pins used to connect the led and the button. If you have followed the
  <a href="#connect-your-first-light-hardware-setup">Fritzing diagram</a> you don't have to change
  anything. If you used different pins, remember to change those values.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// pins configuration
led <- hardware.pin9;
btn <- hardware.pin1;

// pins setup
led.configure(DIGITAL_OUT);
btn.configure(DIGITAL_IN);</xmp></pre>
</div>

<h3>Led and Button Logics</h3>

<p>
  Here we define all needed variables to make the button correctly work.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// button and led logic
state <- 1; // current state of the output pin
reading <- 0; // current reading from the imput pin
previous <- 0; // previous reading from the input pin
debounce <- 200; // the debounce time, increase if the outp flickers
time <- 0; // the last time the output pin was toggled</xmp></pre>
</div>

<h3>Electric Imp Loop</h3>

<p>
We use of a pushbutton as a switch: each time you press the button the led is
turned on or off. It also debounces the input, without which pressing the button
once would appear to the code as multiple presses. Once the led state changes,
the Device will send a "data" event to the Agent with the associated payload.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>function loop() {
  // read the button state
  reading = btn.read();

  // if the input just went from LOW and HIGH and we've waited long enough to ignore
  // any noise on the circuit, toggle the output pin and remember the time
  if (reading && !previous && hardware.millis() - time > debounce) {
    if (state == 0) {
      server.log("[PHYSICAL] Led turned on");
      state = 1;
      lelylanPublish("on");
    } else {
      server.log("[PHYSICAL] Led turned off");
      state = 0;
      lelylanPublish("off");
    }
    time = hardware.millis();
  }

  // effectively update the light status
  led.write(state);
  previous = reading;

  // schedule imp to wakeup in 0.05 seconds and do it again.
  imp.wakeup(0.05, loop);
}</xmp></pre>
</div>

<p>
To actual start the loop for the first time we must invoke the <code>loop</code> function
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// electric imp bootstrap
loop();</xmp></pre>
</div>

<h3>Payload</h3>

<p>
  When communicating with Lelylan we use a fixed JSON structure. For this basic example we
  defined first a Squirrel object which later will be JSON encoded by the Agent.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// Status-id is the basic light status id (http://types.lelylan.com/types/518be107ef539711af000001)
const property_light_status = "518be5a700045e1521000001";</xmp></pre>
</div>

<div class="code-block">
<pre class="prettyprint"><xmp>// sends payload to update the device on lelylan
function lelylanPublish(val) {
  payload <- {
    "properties": [{
      "id": property_light_status,
      "value": val
    }]
  };

  // the device sends the "data" event to agent with associated payload
  agent.send("data", payload);
};</xmp></pre>
</div>

<h3>Event Handlers</h3>

<p>
The <code>success</code> and the <code>error</code> are used for logging purpose
of the Agent's <code>lelylanSet</code> function
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// callback to notify lelylan updated succesfully
agent.on("success", success);

// callback to notify an error on lelylan communications
agent.on("error", error);</xmp></pre>
</div>

<div class="code-block">
<pre class="prettyprint"><xmp>function error(body) {
  server.log("[LELYLAN]: physical device not updated correctly");
};

function success(body) {
  server.log("[LELYLAN]: physical device updated correctly");
};</xmp></pre>
</div>

<p>
The <code>update</code> handler is used to update the physical device when someone change
its status through Lelylan (Dashboard, mobile, etc) To correctly apply a command to our
light we need to check the value for the status property, turning it on or off.
</p>

<div class="code-block">
<pre class="prettyprint"><xmp>// callback called when changes come from lelylan dashboard
agent.on("update", update);</xmp></pre>
</div>

<div class="code-block">
<pre class="prettyprint"><xmp>// device receives "update" event from agent with light status value
function update(data){
  if (data == "on") state = 1;
  else state = 0;

  led.write(state);
};</xmp></pre>
</div>


<h2 id="connect-your-first-light-authors">Guest Article</h2>

<p>
This article is brought to life from William Bergamo.
</p>

<a href="https://twitter.com/bugduino">
  <%= image_tag('collaborators/bugduino.png', class: 'img-thumbnail') %>
</a>


<h2 id="connect-your-first-light-feedback"><span class="glyphicon glyphicon-comment"></span> Feedback</h2>

<%= render 'shared/feedback' %>
