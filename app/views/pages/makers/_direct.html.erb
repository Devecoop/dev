<h2 id="direct-overview">Overview</h2>

<p>
  When MQTT is not available, use the direct access solution, making the physical device
  directly accessible through a Public IP Address. If you do not have one, you can create
  a tunnel with solutions like
  <a href="https://ngrok.com/">ngrock</a>,
  <a href="https://forwardhq.com/">Forward</a> or
  <a href="http://tunnlr.com/">Tunnlr</a>.
</p>

<h2 id="direct-lelylan-setup">Lelylan Setup</a></h2>

<p>
  To connet your hardware with MQTT you first need to create a new device.
  Open <a href="http://lelylan.github.io/devices-dashboard-ng/">Lelylan Dashboard</a>
  and create a new device by following 3 simple steps (if you are new to Lelylan, you can
  <a href="http://people.lelylan.com/users/sign_up">sign up</a> for free).
</p>

<h3>1) Set a meaningful name (e.g. bedroom light).</h3>

<%= image_tag('makers-api/step-1.png', class: 'img-thumbnail') %>

<h3>2) Choose the device type (for this tutorial choose <em>Basic Light</em>).</h3>

<%= image_tag('makers-api/step-2.png', class: 'img-thumbnail') %>

<h3>3) Choose <em>"Custom URI"</em> as connectivity option.</h3>

<p>
When you choose custom URI as connectivity option you need to set the physical device
URI that makes it accessible.
</p>

<%= image_tag('makers-api/direct.png', class: 'img-thumbnail') %>

<h3>4) Get the Device ID and Device Secret.</h3>

<p>
  Once the device is created click on settings (placed under the device name)
  and get the device info.
</p>

<ul>
  <li><em>ID</em> - Unique device identifier (MQTT username).</li>
  <li><em>Secret</em> - Device secret code (MQTT password).</li>
  <li><em>Type</em> - Link to the type definition (use it to check the device properties)</li>
</ul>

<%= image_tag('makers-api/step-4.png', class: 'img-thumbnail') %>

<h2 id="direct-how-to-receive-data">How to Receive Data</h2>

<p>
When a user updates a device using Lelylan (e.g API, dashboard), a request
with the properties to update is sent to the physical device.
</p>

<h3>Received Request Example</h3>

<div class="code-block">
<pre><code>PUT http://arduino.house.com/physical-id</code></pre>
</div>

<h3>Received Headers</h3>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>X-Physical-Secret</span>
      </td>
      <td>
        The device <a href="/developers#get-a-device-private-info">secret</a>
        (checked by the physical device).
      </td>
    </tr>
  </tbody>
</table>

<h3>Received Params</h3>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
      </td>
      <td>
        Array of properties to change in the physical world.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
      </td>
      <td>
        Property value to set.
      </td>
    </tr>
  </tbody>
</table>

<h3>Received Request Example</h3>

<p>
Follows a request that the physical device could receive.
</p>

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-physical-device-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-physical-device-properties-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-physical-device-properties-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#update-physical-device-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#update-physical-device-properties-python" data-toggle="tab" class="python">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-physical-device-properties-curl">
    <div class="preview">
      <pre><xmp>curl -X PUT <physical-device-uri> \
     -H 'Content-Type: application/json' \
     -H 'X-Physical-Secret: <secret>' \
     -d '{ "properties": [{ "id": "<status-id>", "value": "on" }] }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')();
var uri = '<physical-device-uri>'; // physical device URI you want to interact with
var secret = '<secret>'; // see dev.lelylan.com/api/devices#get-a-device-private-info
var params = { 'properties': [{ 'id': '<status-id>', 'value': 'on' }] };

Lelylan.Physical.properties(uri, secret, params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, $resource) {
      var uri = '<physical-device-uri>'; // physical device URI you want to interact with
      var secret = '<secret>';  // see dev.lelylan.com/api/devices#get-a-device-private-info
      var params = { 'properties': [{ 'id': '<status>', 'value': 'on' }] };

      var action = { update: { method: 'PUT', headers: { 'X-Physical-Secret': secret } } };
      var Physical = $resource(uri, {}, action);

      $scope.physical = new Physical(params);
      $scope.physical.$update();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new
uri = '<physical-device-uri>' # physical device URI you want to interact with
secret = '<secret>'; # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on' }] }

response = lelylan.physical_properties(uri, secret, params)</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-physical-device-properties-python">
    <div class="preview">
      <pre class="prettyprint"><xmp>uri = '<physical-device-uri>' # physical device URI you want to interact with
secret = '<secret>'; # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on' }] }

from lelylan import physical
response = physical.receive_update(uri, secret, params)</xmp></pre>
    </div>
  </div>
</div>

<h3>Response Example</h3>

<p>
When receiving a request the physical device must respond with a status code
<code>202 Accepted</code>. This tells Lelylan that the request has been accepted
and that the processing has not been completed. From this moment the device is pending.
</p>

<div class="code-block"><pre><code>HTTP/1.1 202 Accepted<hr>
{ "status": "202" }</code></pre></div>

<p>
Once the physical device completes the request, it must notify Lelylan by sending
the updated properties. When Lelylan receives it, the device end up its pending status.
</p>

<div class="alert alert-info">
  <p>
  <span class="label label-lelylan">notice</span>
  Learn more about the <a href="/support#faq-value-expected-pending">pending status</a> of a device.
  </p>
</div>

<h2 id="direct-how-to-send-data">How to Send Data</h2>

<p>
When a physical device updates its status through a physical interaction, a request with the
list of updated properties needs to be sent to Lelylan.
</p>

<h3>Sent Request Example</h3>

<div class="code-block">
<pre><code>PUT http://api.lelylan.com/devices/:device-id/properties</code></pre>
</div>

<h3>Sent Headers</h3>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>X-Physical-Secret</span>
        <span class="info">required</span>
      </td>
      <td>
        The device <a href="/developers#get-a-device-private-info">secret</a>.
        Lelylan needs it to reject not valid requests.
      </td>
    </tr>
  </tbody>
</table>

<h3>Sent Params</h3>

<table class="table table-stripped table-hover">
  <tbody>
    <tr>
      <td class="parameter">
        <span>properties</span>
        <span class="info">optional</span>
      </td>
      <td>
        Array of properties to change in the physical world.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.id</span>
        <span class="info">required</span>
      </td>
      <td>
        Property ID.
      </td>
    </tr>
    <tr>
      <td class="parameter nested">
        <span>&raquo; property.value</span>
        <span class="info">required</span>
      </td>
      <td>
        Desired property value.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.expected</span>
        <span class="info">optional</span>
      </td>
      <td>
        Expected property value.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
      </td>
    </tr>
        <tr>
      <td class="parameter nested">
        <span>&raquo; property.pending</span>
        <span class="info">optional</span>
      </td>
      <td>
        Property pending status.
        <a href="/support#faq-value-expected-pending">Learn more about</a>.
        <span class="info">Valid values: true, false.</span>
      </td>
    </tr>
  </tbody>
</table>

<h3>Example Request</h3>

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-device-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-device-properties-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-device-properties-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#update-device-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#update-device-properties-python" data-toggle="tab" class="python">Python</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-device-properties-curl">
    <div class="preview">
      <pre><xmp>curl -X PUT http://api.lelylan.com/devices/<id>/properties \
    -H 'X-Physical-Secret: <secret>' \
    -H 'Content-Type: application/json' \
    -d '{ "properties": [{ "id": "<status>", "value": "on" }] }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')();
var uri = 'http://api.lelylan.com/devices/<id>/properties'; // device property API
var secret = '<secret>'; // see dev.lelylan.com/api/devices#get-a-device-private-info
var params = { 'properties': [{ 'id': '<status>', 'value': 'on' }] };

Lelylan.Physical.properties(uri, secret, params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <div ng-controller="LelylanController">{{type}}</div>
  <script>
    function LelylanController($scope, $resource) {
      var uri = 'http://api.lelylan.com/devices/<id>/properties'; // device property API
      var secret = '<device-secret>'; //see dev.lelylan.com/api/devices#get-a-device-private-info
      var params = { 'properties': [{ 'id': '<status>', 'value': 'on' }] };

      var action = { update: { method: 'PUT', headers: { 'X-Physical-Secret': secret } } };
      var Physical = $resource(uri, {}, action);

      $scope.physical = new Physical(params);
      $scope.physical.$update();
    }
  </script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"/></script>
  <script src="//cdn.lelylan.com/angular/0.1/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new
uri = 'http://api.lelylan.com/devices/<id>/properties' # device property API
secret = '<device-secret>' # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on' }] }
response = lelylan.physical_properties(uri, secret, params)</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-device-properties-python">
    <div class="preview">
      <pre class="prettyprint"><xmp>uri = 'http://api.lelylan.com/devices/<id>/properties' # device property API
secret = '<device-secret>' # see dev.lelylan.com/api/devices#get-a-device-private-info
params = { properties: [{ id: '<status>', value: 'on', pending: false }] }

from lelylan import physical
response = physical.receive_update(uri, secret, params)</xmp></pre>
    </div>
  </div>
</div>
<br>

<h2 id="direct-accessible-services">Accessible services</h2>

<p>
A physical device has access to a limited set of Lelylan API.
</p>

<ul>
  <li>
  <a href="/developers#update-a-device">Update device</a>
  </li>
  <li>
  <a href="/developers#update-device-properties">Update device properties</a>
  </li>
</ul>

<h2 id="direct-control-your-physical-device">Control your physical device</h2>

<p>
Access <a href="http://lelylan.github.io/devices-dashboard-ng">Lelylan Dashboard</a>
and control your connected device from mobile, tablet and desktop in realtime.
If any problem occours, let <a href="http://twitter.com/lelylan">@lelylan</a> know.
</p>

<a href="lelylan.github.io/devices-dashboard-ng/">
<%= image_tag('makers-api/control.png', class: 'img-thumbnail') %>
</a>

<h2 id="direct-learn-more">Learn more</h2>

<p>
There were no articles for this section. If you are using the "direct access" flow
in any of your projects let <a href="http://twitter.com/lelylan">@lelylan</a> know on Twitter
and we'll add new use cases to our documentation.
</p>

<h2 id="direct-feedback"><span class="glyphicon glyphicon-comment"></span> Feedback</h2>

<%= render 'shared/feedback' %>
