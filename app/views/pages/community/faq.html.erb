<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#devices-and-physicals">Devices and Physical Devices</a></td></tr>
    <tr><td>&raquo; <a href="#value-and-physical-value">Value and Physical value</a></td></tr>
    <tr><td>&raquo; <a href="#pending-devices">Pending devices</a></td></tr>
    <tr><td>&raquo; <a href="#device-status">Device status</a></td></tr>
    <tr><td>&raquo; <a href="#signature-header">Signature header</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="faq"><%= title %></a></h1>

<p>
If you think we are missing a clear description about any concept related to Lelylan, please
<a href="http://twitter.com/#!/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us. We are looking forward to answer at your questons.
</p>

</article>

</br>

<article>

<h2 class="call"><a name="devices-and-physicals">Differences between devices and physical devices</a></h2>

<p>
The differences between a device and a physical device (aka physicals) isn't always clear.
Here we try to make concepts clear.

<ul>
  <li>
  <strong><a href="/api/devices">Device</a></strong>. Is the resource defined in Lelylan as virtual
  representation of any physical object. A device can be connected to the physical world through
  the <code>physical</code> param and if this connection exists all commands sent to the device
  are forwarded to the physical device.
  </li>
  <li>
  <strong><a href="/api/physicals">Physical device</a></strong>. Is the physical object you
  interact with in the real world. It receives all commands from the device it is connected
  to and sends it the realtime updates to keep the device updated during time.
  </li>
</ul>

</article>

<article>

<h2 class="call"><a name="value-and-physical-value">Value, physical value and pending status</a></h2>

<p>
  A device property can be updated through three params.
</p>

<ul>
  <li>
  <code>value</code> - Represents the desired value for a device property.
  </li>
  <li>
  <code>physical_value</code> - Represents the property value in the physical world.
  </li>
  <li>
  <code>pending</code> - Between the moment the desired <code>value</code> is set and
  the <code>physical_value</code> is updated from the physical device, the property
  is pending. Setting the pending value to <code>true</code> or <code>false</code>
  let you knwo if the property is pending.
  </li>
</ul>

<h4>Example Requests</h4>

<p>Suppose we have a roller shutter. This requests sets the desired <code>value</code> to
<code>100</code> meaning that we wants it fully open, and it sets the <code>physical_value</code>
to <code>5</code> meaning that right now it's open for the 5%. It also sets the <code>pending</code>
status to <code>true</code> as the request is under execution.

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-properties-javascript" data-toggle="tab" class="javascript">Javascript</a></li>
  <li><a href="#update-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-properties-curl">
    <div class="preview"><pre><code class="no-highlight">curl -X PUT http://api.lelylan.com/devices/5042344b95fc441000000001/properties \
    -H 'Authorization: Bearer &lt;token&gt;' \
    -H 'Content-Type: application/json' \
    -d '{
          "properties": [{
            "uri": "http://api.lelylan.com/properties/&lt;level&gt;",
            "value": "100" "physical_value": "5", "pending": true }
          ]
        }'</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-javascript">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-ruby">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
</div>

<p class="notice">
<span class="label">Notice</span>
Lelylan automatically sets the pending value following a <a href="#pending-devices">
simple set of rules</a>. Anyway, the physical devices should always set the pending
status at any request to avoid inconsistencies.
</p>

</article>

<article>

<h2 class="call"><a name="pending-devices">Pending devices</a></h2>

<p>
When updating device <a href="/api/devices#update-properties">properties</a> or when
<a href="/api/devices#update-properties">executing a function</a> a physical device
does not change instantaneously. Think at roller shutter. From the moment you send the
request to open it and the moment it's physically open, a few seconds are needed.
During this period of time the device is defined as <strong>pending</strong>.
</p>

<p>
In order to set a device as pending you need to update the pending status of its
properties. To do this you have two solutions.
</p>

<ul>
  <li>
  <strong>Implicit</strong> - Lelylan tries to guess the pending status following some basic rules.
  </li>
  <li>
  <strong>Explicit</strong> - Setting the pending value of the property to <code>true</code>
  or <code>false</code>
  </li>
</ul>

<p class="notice">
<span class="label">Notice</span>
Lelylan applies those rules only when a device is connected to the physical world
otherwise the pending status is always set to <code>false</code>.
</p>

<h4>Implicit pending definitions</h4>

<p>
To better understand how Lelylan decides if a property is pending or not, we make some examples
based on a roller shutter characterized by the property <code>level</code>, which indicates
how much it's open through a range that goes from <code>0</code> to <code>100</code>.
</p>

<br/>

<table class="zebra-striped">
  <tbody>
    <tr>
      <td style="width: 85px">
        <strong>Rule 1</strong>
      </td>
      <td>
        <strong>Set the value param (usually from the web)</strong></br>
        You decide to open the roller shutter with your mobile app setting its level
        <code>value</code> to 100. The pending status is set to <code>true</code> until
        the physical device doesn't apply the desired changes by updating the
        <code>physical_value</code>.
      </td>
    </tr>
    <tr>
      <td>
        <strong>Rule 2</strong>
      </td>
      <td>
        <strong>Sets the physical value with an halfway value (usually from physical device)</strong></br>
        The physical device is opening the rolling shutter but it is at 50% of the task.
        It updates the <code>physical_value</code> to 50 and as this isn't the final value,
        the pending status continue to be <code>true</code>.
      </td>
    </tr>
    <tr>
      <td>
        <strong>Rule 3</strong>
      </td>
      <td>
        <strong>Set the final physical value (usually from physical device)</strong></br>
        The physical device fully opens the rolling shutter. It updates the <code>physical_value</code>
        to 100 matching with the desired <code>value</code> of 100 and setting the pending status to
        <code>false</code>.
      </td>
    </tr>
  </tbody>
</table>

<br/>

<p class="notice">
<span class="label">Notice</span>
If you feel brave enough check out the <a href="https://gist.github.com/4258925">specs</a> related
to the pending status.
</p>

</article>

<article>

<h2 class="call"><a name="device-status">Device status explained</a></h2>

<p>
Sometimes properties are not enough to describe the device status.
Think at a roller shutter for example. It has the property <code>status</code>
that accepts the values <code>open</code> and <code>close</code>. Now think at
what happens when a roller shutter is opening. It is neither open or close, but just
opening. To have a complete control over the device at every moment of its life use the
status resource.
</p>

<p>
Right now this service is not available on server side. To get the device status you must
use one of the existing <a href="/community/clients/">Javascript libraries</a>.
This decision is due to performance motivation and to the fact that the status information
is a client visualization tasks.
</p>

<ul class="nav nav-tabs">
  <li class="active" data-toggle="tab" class="javascript"><a href="#get-status-javascript">Javascript</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="get-status-javascript">
    <div class="preview">
      <pre><code>device = Device.find(uri);
status = device.status();</code></pre>
    </div>
  </div>
</div>

<p>
In this example we show how to get the device status. Just find the device through
its id and call the <code>status()</code> method. See the
<a href="/api/types/statuses/#status-representation">status representation</a> to
get an idea of its structure.
</p>

<p class="notice">
<span class="label">Notice</span>
If you think that this functionality must be present in the server side
<a href="/community/support/">write us</a> your use cases and why you need it.
We are open to discussions.
</p>

</article>

<article>

<h2 class="call"><a name="signature-header">Signature header</a></h2>

<p>
When communicating with external services we can't assume an HTTPS connection. This happens
for example when sending a realtime updates to a subscribed third party application or when
we communicating with the physical world.
<p>

<p>
To make those communications secure we need to add a <strong>nonce</strong> (unique string
between all requests) and a <strong>signature</strong> which proves the message is generated
from us. A signature is made by an SHA-1-signed hexadecimal digest using a secret as key and
the payload as message.
</p>

<h4>Signature check example</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#verify-payload-javascript" data-toggle="tab" class="javascript">Javascript</a></li>
  <li><a href="#verify-payload-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane" id="verify-payload-ruby">
    <div class="preview">
      <pre><code>require 'openssl'

secret    = CLIENT_SECRET
signature = request.headers['X-Physical-Signature']
payload   = request.body

digest = OpenSSL::Digest::Digest.new('sha1')
verify = OpenSSL::HMAC.hexdigest(digest, client_secret, payload.to_json.to_s)

raise InvalidSignature, "Invalid X-Physical-Signature" if signature != verify</code></pre>
    </div>
  </div>
    <div class="tab-pane active" id="verify-payload-javascript">
    <div class="preview">
      <pre><code>var crypto = require('crypto');

var secret    = CLIENT_SECRET,
    signature = request.headers('X-Physical-Signature'),
    payload   = request.body();

digest = crypto.createHmac("sha1", secret);
digest.update(JSON.stringify(payload));
verify = digest.digest('hex')

if (signature != verify) throw new(Error)("Invalid X-Physical-Signature");</code></pre>
    </div>
  </div>
</div>

</article>

