<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#devices-and-physicals">Devices and Physical Devices</a></td></tr>
    <tr><td>&raquo; <a href="#value-and-expected-value">Value, expected and pending</a></td></tr>
    <tr><td>&raquo; <a href="#device-status">Device status</a></td></tr>
    <tr><td>&raquo; <a href="#suggested-values">Suggested values</a></td></tr>
    <tr><td>&raquo; <a href="#function-conventions">Function conventions</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="faq"><%= title %></a></h1>

<p>
If you think we are missing a clear description about any concept related to Lelylan, please
<a href="http://twitter.com/#!/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us. We are looking forward to answer at your questons.
</p>

</article>

</br>

<article>

<h2 class="call"><a name="devices-and-physicals">Differences between devices and physical devices</a></h2>

<p>
The differences between a device and a physical device (aka physicals) isn't always clear.

<ul>
  <li>
  <strong><a href="/api/devices">Device</a></strong>. Is the resource defined in Lelylan as
  virtual representation of any object. A device can be connected to the physical world setting
  the <code>physical</code> param.
  </li>
  <li>
  <strong><a href="/api/physicals">Physical device</a></strong>. Is the physical object you
  interact with in the real world. It's the device that receives all requests from the device
  it is connected to and sends back the realtime updates happening in the physical world.
  </li>
</ul>

</article>

<article>

<h2 class="call"><a name="value-and-expected-value">Value, expected and pending explained</a></h2>

<p>
A device can be monitored or controlled through the <code>value</code> param. The problem is that
using only <code>value</code> you can't have a full control of your device's status. Think at
a roller shutter. How can I distinguish the actual opening level from the desired one? How can I
know when it's finally open? To solve those problems Lelylan let you update a property using three
params.
</p>

<ul>
  <li>
  <code>value</code> - Represents the property value in the real world. It is generally used by
  the physical device to notify the physical updates.
  </li>
  <li>
  <code>expected</code> - Represents the property value expected from the user. It is generally
  used by the apps that let you control your devices.
  </li>
  <li>
  <code>pending</code> - Between the moment in which the device receives the expected value and the
  physical device sets it, the property is considered pending. Accepted values are <code>true</code>
  and <code>false</code>.
  </li>
</ul>

<h3 class="call"><a name="value-and-expected-value">How do I use it?</a></h3>

<p>
The use cases you need to know are three.
</p>

<ul>
  <li>
  <strong>Third party app sets a new value</strong> - You decide to open the roller shutter with
  your mobile app setting its <code>expected</code> level to 100 and by setting the pending status
  to <code>true</code>. The device will be pending until the physical device doesn't apply the
  desired changes.
  </li>
  <li>
  <strong>Physical device sets some  intermediate value</strong> - The physical device is opening
  the rolling shutter and it notifies Lelylan that it's half open by setting the device
  <code>value</code> to 50 and the <code>pending</code> status to <code>true</code> as it didn't
  end up the desired changes.
  </li>
  <li>
  <strong>Physical device sets the final value</strong> - The physical device fully opens the
  rolling shutter and it notifies Lelylan by setting the device <code>value</code> to 100. When
  pending is not defined, it is set <code>false</code> meaning that the request has been resolved.
  </li>
</ul>

<p>
One more thing. When a device is not connected to a physical device the pending status is always set
to <code>false</code> and when <code>expected</code> is set, it's value is copied into
<code>value</code> simulating an instantaneous update.
</p>



<h4>Example Requests (from third party app)</h4>

<p>Suppose we have a roller shutter. This request sets the <code>expected</code> to
<code>100</code> meaning we want it fully open, and the <code>pending</code> value to
<code>true</code> as the request is waiting for the physical device to resolve the request.

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-properties-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-properties-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#update-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-properties-curl">
    <div class="preview"><pre><xmp class="no-highlight">curl -X PUT http://api.lelylan.com/devices/5042344b95fc441000000001/properties \
     -H 'Authorization: Bearer <token>' \
     -H 'Content-Type: application/json' \
     -d '{
           "properties": [{
             "id": "<level>",
             "expected": "100",
             "pending": true }] }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')({ token: token });
var params = {
  properties:
    [{ id: '<level>',
       expected: '100',
       pending: true }] };

Lelylan.Device.properties('<id>', params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">{{property}}</div>
  <script>
    function LelylanController($scope, Property) {
      var params = {
        id: '<id>',
        properties:
          [{ id: '<level>',
             expected: '100',
             pending: true }] };

      $scope.property = new Property(params);
      $scope.type.$update();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new(token: token)
params = {
  properties:
    [{ id: '<level>',
       expected: '100',
       pending: true }] }

device = lelylan.device_properties('<id>', params)</xmp></pre>
    </div>
  </div>
</div>

<h4>Example Requests (from Physical Device)</h4>

<p>Suppose the roller shutter is fully open. This request sets the <code>value</code> to
<code>100</code> meaning it is it fully open. As the pending <code>pending</code> is not defined,
its default value is <code>false</code>. This means the request is resolved.

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-properties-physical-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-properties-physical-node" data-toggle="tab" class="node">Node.js</a></li>
  <li><a href="#update-properties-physical-angular" data-toggle="tab" class="angular">AngularJS</a></li>
  <li><a href="#update-properties-physical-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-properties-physical-curl">
    <div class="preview"><pre><xmp class="no-highlight">curl -X PUT http://api.lelylan.com/devices/5042344b95fc441000000001/properties \
     -H 'Authorization: Bearer <token>' \
     -H 'Content-Type: application/json' \
     -d '{
           "properties": [{
             "id": "<level>",
             "value": "100" }] }'</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-physical-node">
    <div class="preview">
      <pre class="prettyprint"><xmp>var Lelylan = require('lelylan-node')({ token: token });
var params = {
  properties:
    [{ id: '<level>',
       value: '100' }] };

Lelylan.Device.properties('<id>', params, callback);</xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-physical-angular">
    <div class="preview">
      <pre class="prettyprint"><xmp><html ng-app="lelylan">
<body>
  <!-- login component here (dev.lelylan.com/api/oauth#implicit-grant-angular) -->
  <div ng-controller="LelylanController">{{property}}</div>
  <script>
    function LelylanController($scope, Property) {
      var params = {
        id: '<id>',
        properties:
          [{ id: '<level>',
             value: '100' }] };

      $scope.property = new Property(params);
      $scope.type.$update();
    }
  </script>

  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-resource.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.1.4/angular-cookies.min.js"></script>
  <script src="//s.lelylan.com/angularjs/0.1.0/lelylan.min.js"/></script>
</body>
</html></xmp></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-physical-ruby">
    <div class="preview">
      <pre class="prettyprint"><xmp>lelylan = Lelylan::Client.new(token: token)
params = {
  properties:
    [{ id: '<level>',
       value: '100' }] }

device = lelylan.device_properties('<id>', params)</xmp></pre>
    </div>
  </div>
</div>

</article>

<article>

<h2 class="call"><a name="device-status">Device status explained</a></h2>

<p>
Sometimes properties are not enough to describe the device status.
Think at a roller shutter for example. It has the property <code>status</code>
that accepts the values <code>open</code> and <code>close</code>. Now think at
what happens when a roller shutter is opening. It is neither open or close, but just
opening. To have a complete control over the device at every moment of its life use the
status resource.
</p>

<p>
Right now this service is not available on server side. This decision is due to performance
motivation and to the fact that the status information is a client visualization tasks.
At the moment a basic implementation is available on the AngularJS
<a href="http://lelylan.github.com/devices-component-ng/">Device component</a>
where it is used to give a basic description of the device status.
</p>

</article>

<article>

<h2 class="call"><a name="suggested-values">Suggested values</a></h2>

<p>
The field <code>suggested</code> represents a list of value/description pairs where
<code>value</code> is the value used to update the
<a href="/api/devices#update-properties">device properties</a> while
the <code>description</code> is a friendly description of the value.
Below you can see an example
where the values <code>on</code> and <code>off</code> are the values sent to the device
properties while <code>On</code> and <code>Off</code> are the respective descriptions.
</p>

<div class="preview"><pre><code class="ruby"># list of suggested pair => { "value": "description", "value": "description", ...
"suggested": { "on": "On", "off": "Off" }</code></pre></div>

<br>

<p>
Populating the <code>suggested</code> list requires some extra work but give you two advantages.
</p>

<ul>
  <li>
  <strong>Uniformity</strong> -
  A clear interfaces to access to the physical devices is something we need. Using the
  <code>suggested</code> field lets you define which values are accepted.
  </li>
  <li>
  <strong>User interfaces</strong> -
  Makes it easy to generate UI used for the control of devices.
  </li>
</ul>

<p>
One more thing. When creating a device the <code>suggested</code> values are inherited
by the <a href="/api/types/properties">type properties</a>, but you can change it whenever
you want on your devices. This is useful in scenarios where a physical device needs to set
the accepted values (e.g a television setting the channel names).
</p>

<p class="notice">
<span class="label">notice</span> As the name indicate the <code>suggested</code> list
isn't something strict to follow, meaning that a device can receive any value. Anyway,
is a good practice to use it whenever possible.
</p>

</article>

<article>

<h2 class="call"><a name="function-conventions">Function conventions</a></h2>

<p>
Functions are used to automatically set the properties <code>expected</code> value.
For example the function 'turn on' sets the property <code>status</code> to <code>on</code>.
Anyway, sometimes you don't need to set a predefined value. Think at a dimmer where you want
to set its intensity. In that case the expected intensity must be set from the user.
<p>

<p>
For this reason when you do not set <code>expected</code> its default is <code>{{}}</code>.
This is a convention telling you (UI) that the value must be filled by the user. If
you want to set a default value by default, you can do it by putting it inside the brackets.
Supposing you want to intensity value of a light be 100% if the user does not set it, set
<code>expected</code> to <code>{{100}}</code>.
</p>

</article>

