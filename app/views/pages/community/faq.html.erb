<article>

<aside class="menu">
</br>
<table>
  <tbody>
    <tr><td><a href="" class="upcase"><%= title %></a></td></tr>
    <tr><td>&raquo; <a href="#devices-and-physicals">Devices and Physical Devices</a></td></tr>
    <tr><td>&raquo; <a href="#value-and-expected-value">Value and Expected value</a></td></tr>
    <tr><td>&raquo; <a href="#pending-devices">Pending devices</a></td></tr>
    <tr><td>&raquo; <a href="#device-status">Device status</a></td></tr>
    <tr><td>&raquo; <a href="#suggested-values">Suggested values</a></td></tr>
    <tr><td>&raquo; <a href="#function-conventions">Function conventions</a></td></tr>
    <tr><td>&raquo; <a href="#signature">Signature</a></td></tr>
  </tbody>
</table>
</aside>

<h1 class="call"><a name="faq"><%= title %></a></h1>

<p>
If you think we are missing a clear description about any concept related to Lelylan, please
<a href="http://twitter.com/#!/lelylan">tweet</a> or
<a href="mailto:touch@lelylan.com">mail</a> us. We are looking forward to answer at your questons.
</p>

</article>

</br>

<article>

<h2 class="call"><a name="devices-and-physicals">Differences between devices and physical devices</a></h2>

<p>
The differences between a device and a physical device (aka physicals) isn't always clear.

<ul>
  <li>
  <strong><a href="/api/devices">Device</a></strong>. Is the resource defined in Lelylan as virtual
  representation of any physical object. A device can be connected to the physical world through
  the <code>physical</code> param and if this connection exists all requests sent to the device
  are forwarded to the physical device.
  </li>
  <li>
  <strong><a href="/api/physicals">Physical device</a></strong>. Is the physical object you
  interact with in the real world. It receives all requests from the device it is connected
  to and sends back the realtime updates happening in the physical world.
  </li>
</ul>

</article>

<article>

<h2 class="call"><a name="value-and-expected-value">Value, expected value and pending status</a></h2>

<p>
A device can be monitored or controlled through the <code>value</code> param. The problem is that
using only <code>value</code> you can't have a full control of your device's properties. Think at
a roller shutter. How can I distinguish the actual opening level from the desired one? How can I
know when it's finally open? To solve those problems Lelylan let you update a property using three
params.
</p>

<ul>
  <li>
  <code>value</code> - Represents the property value in the real world. It is generally used by
  the physical device to notify the physical updates.
  </li>
  <li>
  <code>expected</code> - Represents the property value expected from the user. It is generally
  used by Apps that let you control your devices.
  </li>
  <li>
  <code>pending</code> - Between the moment <code>expected</code> is set and <code>value</code>
  is updated to the desired value from the physical device, the property is pending. Lelylan
  automatically sets the pending value following a <a href="#pending-devices">simple set of rules</a>
  and let you override them when needed. Accepted values are <code>true</code> or <code>false</code>.
  </li>
</ul>

<h4>Example Requests</h4>

<p>Suppose we have a roller shutter. This requests sets the <code>expected</code> to
<code>100</code> meaning we want it fully open, <code>value</code> to
<code>50</code> meaning that right now it's half open and <code>pending</code>
status to <code>true</code> as the request is not completed.

<ul class="nav nav-tabs">
  <li class="active"><a href="#update-properties-curl" data-toggle="tab" class="curl">Curl</a></li>
  <li><a href="#update-properties-javascript" data-toggle="tab" class="javascript">Javascript</a></li>
  <li><a href="#update-properties-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="update-properties-curl">
    <div class="preview"><pre><code class="no-highlight">curl -X PUT http://api.lelylan.com/devices/5042344b95fc441000000001/properties \
    -H 'Authorization: Bearer &lt;token&gt;' \
    -H 'Content-Type: application/json' \
    -d '{
          "properties": [{
            "uri": "http://api.lelylan.com/properties/&lt;level&gt;",
            "expected": "100", "value": "50", "pending": true }
          ]
        }'</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-javascript">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="update-properties-ruby">
    <div class="preview">
      <pre><code># todo</code></pre>
    </div>
  </div>
</div>

<p class="notice">
<span class="label">Notice</span>
Although Lelylan automatically sets the pending value following a <a href="#pending-devices">
simple set of rules</a>, physical devices should set the pending status to avoid inconsistencies.
</p>

<p class="notice">
<span class="label">Notice</span>
When <code>expected</code> is set, Lelylan forward it to the physical device through the
<code>value</code> param (a <a href="/api/physicals#receiving-property-updates">physical device</a>
accepts only <code>value</code> as param, not <code>expected</code>).
</p>

</article>

<article>

<h2 class="call"><a name="pending-devices">Pending devices</a></h2>

<p>
When updating device <a href="/api/devices#update-properties">properties</a> or when
<a href="/api/devices#update-properties">executing a function</a> a physical device
does not change instantaneously. From the moment you send a request and the moment
the request is completed, a few seconds are needed. During this period of time the
device is defined as <strong>pending</strong>.
</p>

<p>
A device is pending when one or more properties are pending. This moves our attention
to the properties, which have two ways to set its pending status.
</p>

<ul>
  <li>
  <strong>Implicit</strong> - Lelylan tries to guess the pending status following some
  basic rules.
  </li>
  <li>
  <strong>Explicit</strong> - Setting the property pending value to <code>true</code>
  or <code>false</code>
  </li>
</ul>

<h3><a name="implicit-pending-definition">Implicit pending definition</a></h3>

<p>
To better understand how Lelylan decides if a property is pending or not we prepared
some examples based on a roller shutter characterized by the property <code>level</code>,
which indicates how much it's open through a range that goes from <code>0</code> to
<code>100</code>.
</p>

<ul>
  <li>
  <strong>Rule 1 - Set the expected value (usually from the web)</strong>
  - You decide to open the roller shutter with your mobile app setting its level
  <code>expected</code> to 100. The pending status is set to <code>true</code>
  until the physical device doesn't apply the desired changes and updates
  <code>value</code>.
  </li>
  <li>
  <strong>Rule 2 - Sets an halfway value (usually from physical device)</strong>
  - The physical device is opening the rolling shutter but it's at 50% of the task.
  It updates <code>value</code> to 50 and as this isn't the <code>expected</code>,
  the pending status continue to be <code>true</code>.
  </li>
  <li>
  <strong>Rule 3 - Set the final value (usually from physical device)</strong>
  - The physical device fully opens the rolling shutter. It updates <code>value</code> to
  100 matching the <code>expected</code> of 100 and setting the pending status to
  <code>false</code>.
  </li>
</ul>

<p>
If you feel brave enough, check out the
<a href="https://gist.github.com/4258925#file-device_properties_spec-rb">pending status specs</a>
to have a complete vision of how a pending status is automatically defined by Lelylan.
</p>

<p class="notice">
<span class="label">Notice</span>
When a device is not connected to a physical device those rules are not applied and
the pending status is always set to <code>false</code>. Following the same logic when
<code>expected</code> is set, it's value is copied into <code>value</code> simulating
an instantaneous update.
</p>

</article>

<article>

<h2 class="call"><a name="device-status">Device status explained</a></h2>

<p>
Sometimes properties are not enough to describe the device status.
Think at a roller shutter for example. It has the property <code>status</code>
that accepts the values <code>open</code> and <code>close</code>. Now think at
what happens when a roller shutter is opening. It is neither open or close, but just
opening. To have a complete control over the device at every moment of its life use the
status resource.
</p>

<p>
Right now this service is not available on server side. To get the device status you must
use one of the existing <a href="/community/clients/">Javascript libraries</a>
<span class="label warning">todo</span>. This decision is due to performance motivation and
to the fact that the status information is a client visualization tasks.
</p>

<ul class="nav nav-tabs">
  <li class="active" data-toggle="tab" class="javascript"><a href="#get-status-javascript">Javascript</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="get-status-javascript">
    <div class="preview">
      <pre><code>device = Device.find(uri);
status = device.status();</code></pre>
    </div>
  </div>
</div>

<p>
In this example we show how to get the device status. Just find the device through
its id and call the <code>status()</code> method. See the
<a href="/api/types/statuses/#status-representation">status representation</a> to
get an idea of its structure.
</p>

<p class="notice">
<span class="label">Notice</span>
If you think that this functionality must be present in the server side
<a href="/community/support/">write us</a> your use cases and why you need it.
We are open to discussions.
</p>

</article>

<article>

<h2 class="call"><a name="suggested-values">Suggested values</a></h2>

<p>
The field <code>suggested</code> represents a list of value/description pairs where
<code>value</code> is the value used to update the
<a href="/api/devices#update-properties">device properties</a> while
the <code>description</code> is a friendly description of the value.
Below you can see an example
where the values <code>on</code> and <code>off</code> are the values sent to the device
properties while <code>On</code> and <code>Off</code> are the respective descriptions.
</p>

<div class="preview"><pre><code class="ruby"># list of suggested pair => { "value": "description", "value": "description", ...
"suggested": { "on": "On", "off": "Off" }</code></pre></div>

<br>

<p>
Populating the <code>suggested</code> list requires some extra work but give you two advantages.
</p>

<ul>
  <li>
  <strong>Uniformity</strong> -
  A clear interfaces to access to the physical devices is something we need. Using the
  <code>suggested</code> field lets you define which values are accepted.
  </li>
  <li>
  <strong>User interfaces</strong> -
  Makes it easy to generate UI used for the control of devices.
  </li>
</ul>

<p>
One more thing. When creating a device the <code>suggested</code> values are inherited
by the <a href="/api/types/properties">type properties</a>, but you can change it whenever
you want on your devices. This is useful in scenarios where a physical device needs to set
the accepted values (e.g a television setting the channel names).
</p>

<p class="notice">
<span class="label">notice</span> As the name indicate the <code>suggested</code> list
isn't something strict to follow, meaning that a device can receive any value. Anyway,
is a good practice to use it whenever possible.
</p>

</article>

<article>

<h2 class="call"><a name="function-conventions">Function conventions</a></h2>

<p>
Functions are used to automatically set the properties <code>expected</code> value.
For example the function 'turn on' sets the property <code>status</code> to <code>on</code>.
Anyway, sometimes you don't need to set a predefined value. Think at a dimmer where you want
to set its intensity. In that case the expected intensity must be set from the user.
<p>

<p>
For this reason when you do not set <code>expected</code> its default is <code>{{}}</code>.
This is a convention telling you (UI) that the value must be filled by the user. If
you want to set a default value by default, you can do it by putting it inside the brackets.
Supposing you want to intensity value of a light be 100% if the user does not set it, set
<code>expected</code> to <code>{{100}}</code>.
</p>

</article>

<article>

<h2 class="call"><a name="signature">Signature</a></h2>

<p>
When communicating with external services we can't assume an HTTPS connection. This happens
for example when sending a realtime updates to a subscribed third party application or when
we communicating with the physical world.
<p>

<p>
To make those communications secure we need to add a <strong>nonce</strong> (unique string
between all requests) and a <strong>signature</strong> which proves the message is generated
from us. A signature is made by an SHA-1-signed hexadecimal digest using a secret as key and
the payload as message.
</p>

<h4>Signature check example</h4>

<ul class="nav nav-tabs">
  <li class="active"><a href="#verify-payload-javascript" data-toggle="tab" class="javascript">Javascript</a></li>
  <li><a href="#verify-payload-ruby" data-toggle="tab" class="ruby">Ruby</a></li>
  <li><a href="#verify-payload-arduino" data-toggle="tab" class="arduino">Arduino</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane" id="verify-payload-ruby">
    <div class="preview">
      <pre><code>require 'openssl'

secret    = CLIENT_SECRET
signature = request.headers['X-Physical-Signature']
payload   = request.body

digest = OpenSSL::Digest::Digest.new('sha1')
verify = OpenSSL::HMAC.hexdigest(digest, client_secret, payload.to_json.to_s)

raise InvalidSignature, "Invalid X-Physical-Signature" if signature != verify</code></pre>
    </div>
  </div>
  <div class="tab-pane active" id="verify-payload-javascript">
    <div class="preview">
      <pre><code>var crypto = require('crypto');

var secret    = CLIENT_SECRET,
    signature = request.headers('X-Physical-Signature'),
    payload   = request.body();

var digest = crypto.createHmac("sha1", secret);
digest.update(JSON.stringify(payload));
var verify = digest.digest('hex')

if (signature != verify) throw new(Error)("Invalid X-Physical-Signature");</code></pre>
    </div>
  </div>
  <div class="tab-pane" id="verify-payload-arduino">
    <div class="preview">
      <pre><code class="cpp">// Download the library from https://github.com/Phoul/cryptosuite
#include "sha1.h"

String payload;
String signature;
String verify;

// Device secret in hex
// 0ca70cc411e9e9de25b47b3e76b8a1932ae48bee6e6fa8808b534994dff5045d
uint8_t secret[]={
  0x0c,0xa7,0x0c,0xc4,0x11,0xe9,0xe9,0xde,0x25,0xb4,0x7b,0x3e,0x76,0xb8,0xa1,0x93,
  0x2a,0xe4,0x8b,0xee,0x6e,0x6f,0xa8,0x80,0x8b,0x53,0x49,0x94,0xdf,0xf5,0x04,0x5d
};

// Convert the Hash into the final String
String convertHash(uint8_t* hash) {
  String returnString; int i;
  for (i=0; i<20; i++) {
    returnString += ("0123456789abcdef"[hash[i]>>4]);
    returnString += ("0123456789abcdef"[hash[i]&0xf]);
  }
  return returnString;
}

void setup() {
  Serial.begin(57600);
}

void loop() {

  payload = REQUEST_PAYLOAD;
  signature = REQUEST_SIGNATURE;

  Sha1.initHmac(secret, 32);
  Sha1.print(payload);
  verify = convertHash(Sha1.resultHmac());

  Serial.println(signature, verify);
}</code></pre>
    </div>
  </div>
</div>

<p class="notice">
<span class="label">Notice</span>
Remember to use the <code>X-Hub-Signature</code> header when using the realtime services
and to use the <code>X-Physical-Signature</code> header when using the physical services.
</p>

</article>
